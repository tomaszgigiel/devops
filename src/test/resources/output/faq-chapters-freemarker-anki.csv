"Na czym opierają się niniejsze notatki?","<p style=""text-align:left;"">Niniejsze notatki opierają się na:<br/>&quot;DevOps. Światowej klasy zwinność, niezawodność i bezpieczeństwo w Twojej organizacji&quot;,<br/>Gene Kim,<br/>Patrick Debois,<br/>John Willis,<br/>Jez Humble,<br/>John Allspaw</p>","devops-handbook-01-preface s:DevOps, 7"
"Co to jest SLA?","<p style=""text-align:left;"">SLA (service level agreement) to:<br/>- umowa zapewnienia poziomu usług.</p>","devops-handbook-01-preface s:DevOps, 8"
"Jak powstał termin &quot;DevOps&quot;?","<p style=""text-align:left;"">Termin &quot;DevOps&quot;:<br/>- pojawił się pierwszy raz na konferencji DevOpsDays 2009,<br/>- zorganizowanej przez Patrick Debois.</p>","devops-handbook-01-preface s:DevOps, 9"
"Co to jest CM?","<p style=""text-align:left;"">CM (configuration management) to:<br/>- zarządzanie konfiguracją.</p>","devops-handbook-01-preface s:DevOps, 10"
"Na czym polega koncepcja &quot;infrastruktura jako kod&quot;?","<p style=""text-align:left;"">Koncepcja &quot;infrastruktura jako kod&quot; polega na:<br/>- działy operacji zachowują się jak programiści,<br/>- utrzymują konfiguracje w systemach zarządzania kodem źródłowym,<br/>- adoptują wzorce dostaw CI/CD w swoich przepływach pracy.</p>","devops-handbook-01-preface s:DevOps, 10"
"Co to jest ITIL?","<p style=""text-align:left;"">ITIL (Information Technology Infrastructure Library) to:<br/>- ciągle zmieniająca się biblioteka praktyk,<br/>- kodyfikuje procesy i techniki stanowiących podstawę operacji IT,<br/>- obejmuje strategię usług, projektowanie i pomoc techniczną.</p>","devops-handbook-01-preface s:DevOps, 11"
"Co to jest ITSM?","<p style=""text-align:left;"">ITSM (IT Service Management - dosł. zarządzanie usługami IT) to:<br/>- czynności wykonywane przez organizację,<br/>- w celu projektowania, budowy, dostarczania, obsługi i kontroli usług informatycznych oferowanych klientom.</p>","devops-handbook-01-preface s:DevOps, 11https://en.wikipedia.org/wiki/IT_service_management"
"Jakie są mity związane z DevOps?","<p style=""text-align:left;"">Mity związane z DevOps:<br/>1. DevOps jest tylko dla startupów: patrz Google, Amazon, Netflix.<br/>2. DevOps zastępuje Agile: DevOps jest kontynuacją Agile.<br/>3. DevOps jest niezgodny z ITIL: praktyki DevOps mogą być zgodne z ITIL, szczególnie gdy procesy ITIL zostaną zautomatyzowane.<br/>4. DevOps jest niezgodny z zasadami bezpieczeństwa informacji i zgodności z przepisami: elementy kontroli są zintegrowane z każdym z etapów codziennej pracy w cyklu tworzenia oprogramowania.<br/>5. DevOps eliminuje funkcje operacji IT: działy operacji IT współpracują z działami rozwoju znacznie wcześniej w cyklu życia oprogramowania, praca personelu operacji IT przypomina działania programistów.<br/>6. DevOps to po prostu &quot;infrastruktura jako kod&quot; lub automatyzacja: plus normy kulturowe i architektury.<br/>7. DevOps dotyczy tylko oprogramowania open source: patrz SAP, firmware HP LaserJet.</p>","devops-handbook-01-preface s:DevOps, 11"
"Jakie efekty przynosi wprowadzenie DevOps?","<p style=""text-align:left;"">Efekty DevOps:<br/>- bezpieczne systemy pracy,<br/>- szybkie, niezależne rozwijanie i walidowanie kodu przez małe zespoły,<br/>- bezpieczne wdrożenia,<br/>- wzmacnianie normy kulturowe wysokiego poziomu zaufania.</p>","devops-handbook-01-preface s:DevOps, 13"
"Co to jest DevOps?","<p style=""text-align:left;"">DevOps (development and operations) to zestaw praktyk, który łączy:<br/>- rozwój (development),<br/>- eksploatację (operations),<br/>- zapewnienie jakości (quality assurance).</p>","devops-handbook-01-preface s:https://pl.wikipedia.org/wiki/DevOpshttps://en.wikipedia.org/wiki/DevOps"
"Na czym polega DevOps?","<p style=""text-align:left;"">DevOps polega na współpracy:<br/>- właścicieli produktu,<br/>- deweloperów,<br/>- inżynierów walidacji (QA),<br/>- inżynierów operacji IT,<br/>- inżynierów bezpieczeństwa informacji.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 17"
"Opisz sytuację bez DevOps.","<p style=""text-align:left;"">Sytuacja bez DevOps:<br/>- konflikt pomiędzy działem rozwoju a działem operacji IT,<br/>- testowanie i weryfikacja zabezpieczeń są wykonywane wyłącznie pod koniec projektu,<br/>- kluczowe aktywności wymagają wielu &quot;ręcznych&quot; działań.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 18"
"Co to jest &quot;dług techniczny&quot;?","<p style=""text-align:left;"">&quot;Dług techniczny&quot; (technical debt) to:<br/>- koncepcja w rozwoju oprogramowania,<br/>- odzwierciedla domniemany koszt dodatkowej pracy,<br/>- związanej z wyborem łatwego rozwiązania teraz,<br/>- zamiast stosowania lepszego podejścia, które zajęłoby więcej czasu.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 20https://en.wikipedia.org/wiki/Technical_debt"
"Na czym polega spirala degradacji w IT?","<p style=""text-align:left;"">Spirala degradacji w IT:<br/>Ak1 1. dług techniczny i obejścia, naprawa odkładana,<br/>Akt 2. droga na skróty w celu dotrzymania dat wydania,<br/>Akt 3. rozwój coraz trudniejszy, dłuższy, kosztowniejszy.<br/>Więcej czasu na obsługę awarii, mniej czasu na rozwój.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 21"
"Jak złamać spiralę degradacji?","<p style=""text-align:left;"">Spiralę degradacji może złamać:<br/>- niewielkie, niezależne zespoły obsługujące cały cykl życia oprogramowania,<br/>- szybkie pętle zwrotne na każdym etapie,<br/>- architektura wspierająca pracę w niewielkich, niezależnych zespołach,<br/>- wprowadzanie/wycofywanie nowych funkcji dla segmentów klientów<br/>- automatyzacja (m.in. wdrożeń, testów kodu w systemie kontroli wersji),<br/>- telemetria,<br/>- każdy problem okazją do nauki i usprawnień,<br/>- kultura inspiracji hipotezą: prace to hipotezy, rozwój produktu i usprawnianie to eksperymenty,<br/>- kultura zaufania i współpracy: nagradzanie za podejmowanie ryzyka,<br/>- dbanie o jakość: wstrzykiwanie usterek, żeby nauczyć się działania podczas awarii.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 25"
"Co to jest &quot;dark launch&quot;?","<p style=""text-align:left;"">&quot;Dark launch&quot; to:<br/>- częściowe wdrożenie,<br/>- dla wewnętrznych pracowników i małych grup rzeczywistych użytkowników,<br/>- pozwala to na testowanie i ewolucyjny rozwój,<br/>- aż do pożądanego celu biznesowego.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 26"
"Jaka jest wartość biznesowa DevOps?","<p style=""text-align:left;"">Wartość biznesowa DevOps:<br/>- wyższa wydajność, zwinność, niezawodność, bezpieczeństwo,<br/>- wyższe zadowolenie z pracy pracowników.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 28"
"Jak DevOps pomaga skalować wydajność pracy deweloperów?","<p style=""text-align:left;"">DevOps pomaga skalować wydajność pracy deweloperów poprzez:<br/>- wspiera pracę w małych, niezależnych zespołach,<br/>- co zmniejsza narzut związany z komunikacją, integracją i testowaniem,<br/>- co pozwala zachować wydajność nawet w dużych organizacjach.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 29"
"Jaka jest najważniejsza lekcja z &quot;The Mythical Man-Month&quot;?","<p style=""text-align:left;"">Najważniejsza lekcja z &quot;The Mythical Man-Month&quot;:<br/>- do opóźnionego projektu nie dodawaj dodatkowych programistów.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 29"
"Wymień podstawowe zasady DevOps.","<p style=""text-align:left;"">Podstawowe zasady DevOps:<br/>- Pierwsza droga: Przepływ (flow)<br/>- Druga droga: Sprzężenie zwrotne (feedback)<br/>- Trzecia droga: Ciągłe uczenie się i eksperymentowanie.</p>","devops-handbook-03-imagine-a-world-where-dev-and-ops-become-devops-an-introduction-to-the-devops-handbook s:DevOps, 32"
"Jaka jest relacja między DevOps i Lean?","<p style=""text-align:left;"">DevOps to wynik zastosowania zasad metodyki Lean do strumienia wartości technologii.</p>","devops-handbook-05-part-i-introduction s:DevOps, 35"
"Opisz trzy drogi DevOps.","<p style=""text-align:left;"">Trzy drogi DevOps:<br/>- przepływ: przyspieszają dostarczanie wyników pracy rozwoju i operacji,<br/>- sprzężenia zwrotne, pozwalają tworzyć coraz bezpieczniejsze systemy pracy,<br/>- ciągłe uczenie się i eksperymentowanie: promuje kulturę wysokiego zaufania, naukowe podejście do podejmowania ryzyka.</p>","devops-handbook-05-part-i-introduction s:DevOps, 35"
"Scharakteryzuj Lean.","<p style=""text-align:left;"">Lean:<br/>- czas przekształcenia surowców na produkty jest najlepszym wskaźnikiem jakości,<br/>- niewielkie partie jednym z najlepszych predyktorów krótkich terminów realizacji,<br/>- zasada pull,<br/>- jakość u źródła (quality at the source),<br/>- zarządzanie z poszanowaniem człowieka (leading with humility).</p>","devops-handbook-05-part-i-introduction s:DevOps, 36"
"Co to jest &quot;strumień wartości&quot;?","<p style=""text-align:left;"">&quot;Strumień wartości&quot; to:<br/>- podstawowa koncepcja Lean,<br/>- sekwencja działań podejmowanych przez organizację w celu realizacji zlecenia klienta.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 39"
"Jak umożliwić szybkie i przewidywalne terminy realizacji w strumieniu wartości?","<p style=""text-align:left;"">Żeby umożliwić szybkie i przewidywalne terminy realizacji w strumieniu wartości:<br/>- niewielkie partie,<br/>- zmniejszenie produkcji niezakończonej (Work In Process - WIP),<br/>- przeciwdziałanie przeróbkom,<br/>- ciągła optymalizacja.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 40"
"Co to jest &quot;czas realizacji&quot;?","<p style=""text-align:left;"">Czas realizacji (lead time) to:<br/>- od złożenia zamówienia,<br/>- do zrealizowania zamówienia.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 41"
"Co to jest &quot;czas przetwarzania&quot;?","<p style=""text-align:left;"">Czas przetwarzania (processing time) to:<br/>- inaczej czas zadania (task time),<br/>- od rozpoczęcia pracy nad zamówieniem,<br/>- do zrealizowania zamówienia.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 41"
"Ile trwa czas realizacji wdrażania w DevOps?","<p style=""text-align:left;"">Czas realizacji wdrażania w DevOps trwa:<br/>- w idealnym środowisku, kilka minut,<br/>- automatyzacja testów, wdrażania,<br/>- modułowa architektura, luźne powiązania,<br/>- niewielkie, autonomiczne zespoły.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 43"
"Co to jest wskaźnik procentu C/A?","<p style=""text-align:left;"">Wskaźnik procentu C/A (complete and accurate - &quot;gotowe i dokładne&quot;) to:<br/>- parametr w strumieniu wartości technologii,<br/>- odzwierciedla jakość wyników etapu,<br/>- procent przypadków, gdy dalszy etap otrzymuje pracę w postaci gotowej do wykorzystania.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 43"
"Opisz &quot;pierwszą drogę&quot;.","<p style=""text-align:left;"">&quot;Pierwsza droga&quot;:<br/>- szybki przepływ, skrócony czas realizacji,<br/>- Biznes -&gt; Dev -&gt; Ops -&gt; Klient,<br/>- praca widoczna,<br/>- małe partie,<br/>- przeciwdziałanie defektom,<br/>- optymalizacja,<br/>- automatyzacja, CI/CD.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 44"
"Opisz &quot;drugą drogę&quot;.","<p style=""text-align:left;"">&quot;Druga droga&quot;:<br/>- natychmiastowa informacja zwrotna.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 44"
"Opisz &quot;trzecią drogę&quot;.","<p style=""text-align:left;"">&quot;Trzecia droga&quot;:<br/>- kultura wysokiego zaufania,<br/>- eksperymentowanie,<br/>- lokalne odkrycia na globalne usprawnienia.</p>","devops-handbook-06-1-agile-continuous-delivery-and-the-three-ways s:DevOps, 45"
"Dlaczego praca powinna być widoczna?","<p style=""text-align:left;"">Czyń pracę widoczną, bo:<br/>- stanie się widoczna jako awaria,<br/>- można monitorować i zarządzać.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 48"
"Jak uczynić pracę widoczną?","<p style=""text-align:left;"">Aby uczynić pracę widoczną:<br/>- użyj wizualnych pulpitów.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 48"
"Dlaczego ograniczać pracę w toku?","<p style=""text-align:left;"">Ograniczaj pracę w toku, bo:<br/>- zmiana kontekstu pracownika jest kosztowna.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 59"
"Co to jest WIP?","<p style=""text-align:left;"">WIP (Work In Progress) to:<br/>- praca w toku.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 50"
"Jak ograniczać pracę w toku?","<p style=""text-align:left;"">Aby ograniczać pracę w toku:<br/>- wymuszaj limity pracy w toku.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 50"
"Dlaczego zmniejszać wielkość partii?","<p style=""text-align:left;"">Zmniejszaj wielkość partii, bo:<br/>- warunek szybkiego przepływu.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 50"
"Dlaczego zmniejszać liczbę przełączeń (programiści, administratorzy, testerzy)?","<p style=""text-align:left;"">Zmniejszaj liczbę przełączeń, bo:<br/>- kolejka zadań,<br/>- koordynacja,<br/>- w konsekwencji wydłużony czas realizacji.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 53"
"Jak zmniejszyć konsekwencje przełączeń (programiści, administratorzy, testerzy)?","<p style=""text-align:left;"">Zmniejszaj konsekwencje przełączeń:<br/>- zmniejszy liczbę,<br/>- automatyzuj.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 53"
"Jak identyfikować i eliminować ograniczenia?","<p style=""text-align:left;"">Aby identyfikować i eliminować ograniczenia:<br/>- zawsze jest jedno i tylko jedno ograniczenie,<br/>- znajdź, napraw, ponów.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 54"
"Co jest największym zagrożenie dla rentowności przedsiębiorstwa?","<p style=""text-align:left;"">Największym zagrożenie dla rentowności przedsiębiorstwa są:<br/>- odpady.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 55"
"Co jest &quot;odpad&quot;?","<p style=""text-align:left;"">&quot;Odpad&quot; to:<br/>- wykorzystanie zasobów poza tym, czego wymaga klient i za co jest gotów zapłacić.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 55"
"Wymień rodzaje odpadów.","<p style=""text-align:left;"">Rodzaje odpadów:<br/>- prace wykonane częściowo,<br/>- dodatkowe procesy,<br/>- dodatkowe funkcje,<br/>- przełączanie pomiędzy zadaniami,<br/>- oczekiwanie,<br/>- ruch,<br/>- defekty,<br/>- prace niestandardowe lub ręczne,<br/>- heroizm.</p>","devops-handbook-07-2-the-first-way-the-principles-of-flow s:DevOps, 56"
"Czego dotyczą zasady opisane w &quot;druga droga&quot;?","<p style=""text-align:left;"">Zasady &quot;druga droga&quot;:<br/>- szybkie uzyskiwanie stałego strumienia informacji zwrotnych,<br/>- jak najwcześniej,<br/>- szybki, częsty przepływ informacji.</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 59"
"Na czym polegają problemy z bezpieczną pracą w złożonych systemach?","<p style=""text-align:left;"">Problemy z bezpieczną pracą w złożonych systemach:<br/>- brak możliwości objęcia całości przez jedną osobę,<br/>- te same czynności mogą powodować różne wyniki,<br/>- awarie są nieuniknione.</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 60"
"Jak &quot;druga droga&quot; może zwiększyć bezpieczeństwo?","<p style=""text-align:left;"">&quot;Druga droga&quot; może zwiększyć bezpieczeństwo dzięki:<br/>- zarządzaj pracami tak, żeby ujawniać problemy,<br/>- wykrywaj problemy i natychmiast rozwiązuj.</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 60"
"Jak zauważać problemy natychmiast po ich wystąpieniu?","<p style=""text-align:left;"">Żeby zauważać problemy natychmiast po ich wystąpieniu:<br/>- stosuj pętle sprzężenia zwrotnego i sprzężenia w przód,<br/>- szybki, częsty przepływ informacji przez cały strumień wartości.</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 61"
"Co to jest &quot;swarming&quot;?","<p style=""text-align:left;"">&quot;Swarming&quot; (swarm - &quot;rój&quot;) to:<br/>- mobilizowanie wszystkich osób, które są potrzebne do zażegnania kryzysu,<br/>- opanowanie problemów, zanim zdążą się rozprzestrzenić,<br/>- naprawienie złej sytuacji, by nie mogła się powtórzyć,<br/>- nie twórz obejść, twórz rozwiązania.</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 62"
"Co to jest &quot;linka Andon&quot;?","<p style=""text-align:left;"">&quot;Linka Andon&quot; to:<br/>- stosowana w fabryce Toyota (nie w samochodzie),<br/>- linka, którą każdy może pociągnąć jeśli zauważy problem,<br/>- lider rozwiązuje problem &lt; 1 min,<br/>- jeśli dłużej to zatrzymuje linię produkcyjną.</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 63"
"Jakie są zalety zapewniania jakości bliżej źródła?","<p style=""text-align:left;"">Zalety zapewniania jakości bliżej źródła:<br/>- niższe koszty,<br/>- błąd bardziej zrozumiały jeśli zgłoszony szybko po jego popełnieniu,<br/>- nie przenosisz błędu w dół strumienia.</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 65, 66"
"Jak zapewniać jakość bliżej źródła?","<p style=""text-align:left;"">Aby zapewniać jakość bliżej źródła:<br/>- automatyzuj,<br/>- od razu testuj,<br/>- optymalizuj pracę w dole strumienia (np. przekazuj półprodukt, którego nie można źle podłączyć).</p>","devops-handbook-08-3-the-second-way-the-principles-of-feedback s:DevOps, 65, 66"
"Na czym koncentruje się &quot;trzecia droga&quot;?","<p style=""text-align:left;"">&quot;Trzecia droga&quot; koncentruje się na:<br/>- kultura ciągłego uczenia się i eksperymentowania,<br/>- tworzenie indywidualnej wiedzy,<br/>- i przekształcanie w wiedzę organizacji,<br/>- kultura wysokiego zaufania,<br/>- coraz większe obciążenie systemu, by wymusić udoskonalenia.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 69"
"Co to jest &quot;just culture&quot;?","<p style=""text-align:left;"">&quot;Just culture&quot; (&quot;kultura właściwego postępowania&quot;) to:<br/>- nie szukamy winnego,<br/>- szukamy jak usprawnić, żeby problem się nie powtórzył.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 71"
"Co jest ważniejsze od codziennej pracy?","<p style=""text-align:left;"">Od codziennej pracy ważniejsze są usprawnianie codziennej pracy.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 71"
"Jak zadbać o wprowadzanie usprawnień w codziennej pracy?","<p style=""text-align:left;"">Aby wprowadzać usprawnienia w codziennej pracy:<br/>- jawnie rezerwuj czas na spłacanie długu technicznego,<br/>- usuwanie wad,<br/>- refaktoryzację,<br/>- poprawianie problematycznych obszarów kodu i środowisk.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 73"
"Dlaczego warto przekształcać lokalne odkrycia w globalne usprawnienia?","<p style=""text-align:left;"">Warto przekształcać lokalne odkrycia w globalne usprawnienia, bo:<br/>- gdy ktoś będzie wykonywał podobną pracę,<br/>- to skorzysta ze zbiorowego doświadczenia organizacji.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 74"
"Jak DevOps proponuje zwiększać odporność?","<p style=""text-align:left;"">DevOps proponuje zwiększać odporność poprzez:<br/>- usprawnienia,<br/>- zwiększanie wydajności,<br/>- zwiększanie elastyczności.<br/>W opozycji do tradycyjnego:<br/>- zwiększaj nadmiar.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 75"
"Co to jest &quot;antykruchość&quot;?","<p style=""text-align:left;"">&quot;Antykruchość&quot; (antifragility) to:<br/>- proces zastosowania napięcia w celu zwiększenia elastyczności.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 75"
"Jak wstrzykiwać napięcie w codziennej pracy?","<p style=""text-align:left;"">Wstrzykuj napięcie w codziennej pracy poprzez:<br/>- skracaj czas realizacji,<br/>- zwiększaj zakres pokrycia testami,<br/>- zmniejszaj czas wykonywania testów,<br/>- symuluj awarie.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 75"
"Jaka jest rola lidera w DevOps?","<p style=""text-align:left;"">Rola lidera w DevOps to:<br/>- stwarzanie warunków, dzięki którym zespół może odkryć świetność w swojej codziennej pracy,<br/>- podkreślanie wartości uczenia się,<br/>- i rozwiązywania problemów.<br/>W opozycji do tradycyjnego:<br/>- podejmuj właściwe decyzje.</p>","devops-handbook-09-4-the-third-way-the-principles-of-continual-learning-and-experimentation s:DevOps, 76"
"Co jest &quot;projekt greenfield&quot;?","<p style=""text-align:left;"">&quot;Projekt greenfield&quot; to:<br/>- nowy projekt.</p>","devops-handbook-12-5-selecting-which-value-stream-to-start-with s:DevOps, 86"
"Co jest &quot;projekt brownfield&quot;?","<p style=""text-align:left;"">&quot;Projekt brownfield&quot; to:<br/>- już obsługują klientów,<br/>- potencjalnie są w użyciu od wielu lat,<br/>- często z dużym długiem technicznym.</p>","devops-handbook-12-5-selecting-which-value-stream-to-start-with s:DevOps, 87"
"Jak wybrać strumienie wartości, od których należy zacząć transformację DevOps?","<p style=""text-align:left;"">Transformację DevOps zacznij od:<br/>- kilku obszarów,<br/>- zespołów innowatorów,<br/>- projektów umożliwiających automatyczne testowanie i wdrażanie.</p>","devops-handbook-12-5-selecting-which-value-stream-to-start-with s:DevOps, 87"
"Co to jest &quot;system SoR&quot;?","<p style=""text-align:left;"">&quot;System SoR&quot; (systems of record) to:<br/>- systemy podobne do ERP,<br/>- poprawność jest kluczowa,<br/>- zarządzanie firmą, np. HR,<br/>- &quot;robić to dobrze&quot;.</p>","devops-handbook-12-5-selecting-which-value-stream-to-start-with s:DevOps, 88"
"Co to jest &quot;system SoE&quot;?","<p style=""text-align:left;"">&quot;System SoE&quot; (systems of engagement) to:<br/>- dla klientów lub pracowników,<br/>- np. systemy e-commerce,<br/>- zgodnością z przepisami,<br/>- &quot;robić to szybko&quot;.</p>","devops-handbook-12-5-selecting-which-value-stream-to-start-with s:DevOps, 88"
"Wymień fazy rozwoju metodyki DevOps w organizacji?","<p style=""text-align:left;"">Fazy rozwoju metodyki DevOps w organizacji:<br/>- znajdź innowatorów i pionierów,<br/>- zbuduj masę krytyczną i milczącą większość,<br/>- zidentyfikuj &quot;hamulcowych&quot;.</p>","devops-handbook-12-5-selecting-which-value-stream-to-start-with s:DevOps, 91"
"Jakie są działania po wybraniu strumienia wartości do transformacji DevOps?","<p style=""text-align:left;"">Po wybraniu strumienia wartości do transformacji DevOps:<br/>- zrozum,<br/>- zidentyfikuj uczestników,<br/>- opisz (mapa strumienia wartości),<br/>- stwórz dedykowany zespół transformacji,<br/>- uzgodnij cel.</p>","devops-handbook-13-6-understanding-the-work-in-our-value-stream-making-it-visible-and-expanding-it-across-the-organization s:DevOps, 93"
"Kto uczestniczy w strumieniu wartości?","<p style=""text-align:left;"">Uczestnicy strumienia wartości:<br/>- właściciel produktu,<br/>- zespół deweloperów,<br/>- zespół walidacji (zapewnienia jakości - QA),<br/>- zespół operacyjny,<br/>- zespół zabezpieczeń,<br/>- menedżerowie wydania,<br/>- menedżerowie techniczni lub menedżer strumienia wartości.</p>","devops-handbook-13-6-understanding-the-work-in-our-value-stream-making-it-visible-and-expanding-it-across-the-organization s:DevOps, 95"
"Jak długi powinien być horyzont planowania poprawy (wdrażanie DevOps)?","<p style=""text-align:left;"">Horyzont planowania poprawy (wdrażanie DevOps) powinien być:<br/>- krótki, kilkutygodniowy.</p>","devops-handbook-13-6-understanding-the-work-in-our-value-stream-making-it-visible-and-expanding-it-across-the-organization s:DevOps, 100"
"Ile czasu poświęcić na dług techniczny?","<p style=""text-align:left;"">Na dług techniczny poświęć 20% czasu.</p>","devops-handbook-13-6-understanding-the-work-in-our-value-stream-making-it-visible-and-expanding-it-across-the-organization s:DevOps, 101"
"Jak wzmacniać zachowania DevOps?","<p style=""text-align:left;"">Wzmacniaj zachowania DevOps dzięki narzędziom:<br/>- używaj wspólnych dla Dev i Ops,<br/>- np. wspólne kolejki zadań w JIRA.</p>","devops-handbook-13-6-understanding-the-work-in-our-value-stream-making-it-visible-and-expanding-it-across-the-organization s:DevOps, 105"
"Jak brzmi &quot;prawo Conwaya&quot;?","<p style=""text-align:left;"">&quot;Prawo Conwaya&quot;:<br/>- organizacja oprogramowania jest zgodna z organizacją zespołu programistów,<br/>- pięciu programistów napisze system składający się z pięciu modułów.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 107"
"Wymień typy struktur organizacyjnych.","<p style=""text-align:left;"">Typy struktur organizacyjnych:<br/>- funkcjonalne: optymalizacja wzgl. kosztów, wiedzy, podziału pracy,<br/>- macierzowe: łączą oba typy,<br/>- rynkowe: optymalizacja wzgl. szybkości reagowania na potrzeby klientów.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 110"
"Wymień problemy organizacji funkcjonalnych.","<p style=""text-align:left;"">Problemy organizacji funkcjonalnych:<br/>- podział pracy, koordynacja, kolejki,<br/>- brak zrozumienia jak praca przekłada się na cele w strumieniu,<br/>- centralizacja walidacji, opóźnienia.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 111"
"Wymień zalety organizacji rynkowych.","<p style=""text-align:left;"">Zalety organizacji rynkowych:<br/>- odpowiedź na słabości organizacji funkcjonalnych,<br/>- patrz &quot;trzy drogi&quot;,<br/>- wspólny cel: jakość, dostępność i bezpieczeństwo.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 112, 114"
"Co to jest &quot;drugi paradoks Toyoty&quot;?","<p style=""text-align:left;"">&quot;Drugi paradoks Toyoty&quot;:<br/>- wysoka skuteczność w organizacji funkcjonalnej,<br/>- rozwój i nawyki pracowników.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 114"
"Co to jest &quot;silos&quot;?","<p style=""text-align:left;"">&quot;Silos&quot; to:<br/>- obraz struktury spowodowanej nadmierną specjalizacją zespołów.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 115"
"Jak promować dostrzeganie długoterminowych konsekwencji decyzji podejmowanych przez deweloperów?","<p style=""text-align:left;"">Dostrzeganie długoterminowych konsekwencji decyzji podejmowanych przez deweloperów promuj przez:<br/>- przypisywanie do produktu,<br/>- nie do projektu.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 117"
"Jak wykorzystać &quot;prawo Conwaya&quot;?","<p style=""text-align:left;"">Uwzględniaj &quot;prawo Conwaya&quot;:<br/>- zadbaj o lokalizację, komunikację zespołów.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 117"
"Jak zatrudniając dziesiątki tysięcy programistów zachować wydajność małych zespołów?","<p style=""text-align:left;"">Przy bardzo dużej liczbie programistów w organizacji wysoką wydajność małych zespołów pomaga zachować:<br/>- usługi luźno powiązane w ramach ograniczonych kontekstów,<br/>- SOA, mikrousługi,<br/>- Amazon, Goole.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 118"
"Jak brzmi zasada &quot;zespół na dwie pizze&quot;?","<p style=""text-align:left;"">Zasada &quot;zespół na dwie pizze&quot;:<br/>- niewielki rozmiar zespołu,<br/>- 5 - 10 osób,<br/>- szybkie, autonomiczne, dobrze zorientowane.</p>","devops-handbook-14-7-how-to-design-our-organization-and-architecture-with-conway-s-law-in-mind s:DevOps, 120"
"Jak poprawić wydajność zespołów Dev?","<p style=""text-align:left;"">Aby poprawić wydajność zespołów Dev:<br/>- twórz funkcje samoobsługowe dla Dev,<br/>- wprowadź do zespołu Ops,<br/>- przydziel do zespołu łączników Ops.</p>","devops-handbook-15-8-how-to-get-great-outcomes-by-integrating-operations-into-the-daily-work-of-development s:DevOps, 126"
"Kim jest &quot;łącznik Ops&quot;?","<p style=""text-align:left;"">&quot;Łącznik Ops&quot; to:<br/>- reprezentant Dev w Ops,<br/>- rozumie Dev,<br/>- potrafi się poruszać w Ops.</p>","devops-handbook-15-8-how-to-get-great-outcomes-by-integrating-operations-into-the-daily-work-of-development s:DevOps, 126, 130"
"Jak Ops realizuje prace dla Dev (Netflix)?","<p style=""text-align:left;"">Ops:<br/>- nie buduje,<br/>- nie tworzy,<br/>- nie wdraża<br/>- nie zarządza konfiguracjami<br/>dla Dev.<br/>Zamiast tego buduje narzędzia umożliwiające samoobsługę.</p>","devops-handbook-15-8-how-to-get-great-outcomes-by-integrating-operations-into-the-daily-work-of-development s:DevOps, 128"
"Co to jest &quot;ciągłe dostarczanie&quot;?","<p style=""text-align:left;"">&quot;Ciągłe dostarczanie&quot; (continuous delivery) to:<br/>- podejście inżynierii oprogramowania,<br/>- wytwarzanie w krótkich cyklach,<br/>- wdrażanie w dowolnym momencie.</p>","devops-handbook-17-part-iii-introduction s:https://en.wikipedia.org/wiki/Continuous_delivery"
"Jak utworzyć szybki i niezawodny przepływ?","<p style=""text-align:left;"">Aby utworzyć szybki i niezawodny przepływ:<br/>- pracuj na środowiskach zbliżonych do produkcyjnych,<br/>- twórz dowolne środowisko: automatyzacja, samoobsługa, na żądanie,<br/>- twórz jednego repozytorium prawdy dla całego systemu: kod, dokumentacja, konfiguracje, środowiska,<br/>- twórz infrastrukturę, którą łatwiej odbudować, niż naprawić,<br/>- akceptuj zadanie programistyczne, gdy zbudowane, wdrożone, przetestowane na środowisku zbliżonym do produkcyjnego.</p>","devops-handbook-18-9-create-the-foundations-of-our-deployment-pipeline s:DevOps, 141"
"Co umieszczać we współdzielonym repozytorium kontroli wersji?","<p style=""text-align:left;"">We współdzielonym repozytorium kontroli wersji:<br/>- kod i zależności,<br/>- skrypty,<br/>- narzędzia,<br/>- pliki kontenerów,<br/>- artefakty projektu,<br/>- pliki konfiguracyjne,<br/>- inne.</p>","devops-handbook-18-9-create-the-foundations-of-our-deployment-pipeline s:DevOps, 146"
"Jakie problemy rozwiązuje testowanie automatyczne?","<p style=""text-align:left;"">Testowanie automatyczne pomaga:<br/>- testować często,<br/>- testować w bliskim sąsiedztwie zmiany: uniknięcie &quot;archeologii&quot;, nauka,<br/>- ograniczać koszty testowania rosnące z ilością kodu,<br/>- utrzymać produktywność programistów.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 153"
"Co to jest &quot;push on green&quot;?","<p style=""text-align:left;"">&quot;Push on green&quot; (pchaj, jeśli zielono) to:<br/>- filozofia dostarczania,<br/>- ewidencjonowanie kodu w repozytorium tylko wtedy, gdy przejdzie testy.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 155"
"Co to jest &quot;potok wdrożeń&quot;?","<p style=""text-align:left;"">&quot;Potok wdrożeń&quot; (deployment pipeline) to potok, który:<br/>- integruje kod i środowiska,<br/>- inicjuje testy natychmiast przy ewidencji kodu w repozytowium.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 156"
"Dlaczego tworzyć procedury automatycznej kompilacji i testowania działające w dedykowanych środowiskach?","<p style=""text-align:left;"">Należy tworzyć procedury automatycznej kompilacji i testowania działające w dedykowanych środowiskach, bo:<br/>- procesy budowania i testowania mogą działać przez cały czas, niezależnie od nawyków inżynierów,<br/>- zrozumienie wszystkich zależności wymaganych do budowania,<br/>- pomagają zapewnić powtarzalność instalacji (pakiet instalacyjny, kontener),<br/>- środowiska można upodabniać do produkcji.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 157"
"Czego wymagają praktyki ciągłej integracji?","<p style=""text-align:left;"">Praktyki ciągłej integracji wymagają:<br/>- zbioru automatycznych testów,<br/>- &quot;zatrzymania całej linii produkcyjnej&quot;, gdy testy nie przejdą,<br/>- małe partie pracy.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 159"
"Co to jest &quot;zielona kompilacja&quot;?","<p style=""text-align:left;"">&quot;Zielona kompilacja&quot; to:<br/>- wszystko, co zostało zaewidencjonowane w repozytorium,<br/>- buduje się i nadaje się do wdrożenia.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 160"
"Jakie są kategorie testów automatycznych?","<p style=""text-align:left;"">Kategorie testów automatycznych:<br/>- testy jednostkowe: najszybsze, testują klasę, funkcję,<br/>- testy akceptacyjne: wolniejsze, testują aplikację,<br/>- testy integracji: najwolniejsze, testują współdziałanie z innymi aplikacjami.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 161"
"Co to jest &quot;test dymny&quot;?","<p style=""text-align:left;"">&quot;Test dymny&quot; (smoke test) to:<br/>- zbiór przypadków testowych pokrywających główne funkcjonalności produktu.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 161"
"Co zrobić jeśli znajdziesz błąd dopiero za pomocą testu akceptacyjnego lub integracyjnego?","<p style=""text-align:left;"">Jeśli znajdziesz błąd dopiero za pomocą testu akceptacyjnego lub integracyjnego:<br/>- napisz test jednostkowy, za pomocą którego błąd znajdziesz szybciej, wcześniej i taniej.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 163"
"Kiedy testy jednostkowe lub akceptacyjne są trudne i kosztowne do pisania i utrzymywania?","<p style=""text-align:left;"">Testy jednostkowe lub akceptacyjne są trudne i kosztowne do pisania i utrzymywania:<br/>- architektura jest zbyt ściśle sprzężona,<br/>- brak separacja pomiędzy modułami.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 163"
"Jak przyspieszyć działanie testów?","<p style=""text-align:left;"">Aby przyspieszyć działanie testów:<br/>- wykorzystaj współbieżność,<br/>- różnych testów w ramach tej samej kategorii,<br/>- różnych kategorii.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 164"
"Jak zagwarantować, że dysponujemy wiarygodnymi testami automatycznymi?","<p style=""text-align:left;"">Gwarancją wiarygodnych testów automatycznych są:<br/>- wytwarzanie oprogramowania sterowane testami: TDD (test-driven development),<br/>- wytwarzanie oprogramowania sterowane testami akceptacyjnymi: ATDD (acceptance test-driven development).</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 165"
"Jak wykrywać problemy z wydajnością?","<p style=""text-align:left;"">Aby wykrywać problemy z wydajnością:<br/>- dodaj automatyczne testy wydajności.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 167"
"Jak zagwarantować spełnienie wymagań niefunkcjonalnych?","<p style=""text-align:left;"">Aby zagwarantować spełnienie wymagań niefunkcjonalnych:<br/>- dodaj automatyczne testy wymagań niefunkcjonalnych.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 168"
"Jak zastosować &quot;linkę Andon&quot; w potoku wdrożeń?","<p style=""text-align:left;"">&quot;Linka Andon&quot; w potoku wdrożeń:<br/>- w przypadku awarii potoku wdrożeń,<br/>- przede wszystkim napraw problem.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 169"
"Dlaczego trzeba pociągać za &quot;linkę Andon&quot;?","<p style=""text-align:left;"">Trzeba pociągać za &quot;linkę Andon&quot;, bo:<br/>- tracimy możliwość wdrażania,<br/>- problemy narastają wraz z kolejnymi rewizjami,<br/>- konieczne zatrzymanie prac rozwojowych i &quot;stabilizacja&quot;.</p>","devops-handbook-19-10-enable-fast-and-reliable-automated-testing s:DevOps, 170"
"Co to jest TBD?","<p style=""text-align:left;"">TBD (trunk-based development) to:<br/>- praktyka ciągłej integracji i rozwoju oprogramowania bazującego na rewizji master,<br/>- większa wydajność, stabilność, satysfakcja, wg. &quot;Puppet Labs State of DevOps Report 2015&quot;.</p>","devops-handbook-20-11-enable-and-practice-continuous-integration s:DevOps, 175, 181"
"Jakie są strategie tworzenia gałęzi w repozytorium?","<p style=""text-align:left;"">Strategie tworzenia gałęzi w repozytorium:<br/>- optymalizowane pod kątem indywidualnej wydajności: prywatne gałęzie, trudne scalanie,<br/>- optymalizowane pod kątem wydajności zespołu: wspólny obszar, każda rewizja niesie ryzyko awarii całego projektu.</p>","devops-handbook-20-11-enable-and-practice-continuous-integration s:DevOps, 177"
"Jakie są wady stosowania wielu gałęzi?","<p style=""text-align:left;"">Wady stosowania wielu gałęzi:<br/>- rzadkie scalanie,<br/>- koszt scalania rośnie wykładniczo z liczbą gałęzi,<br/>- opóźnione testy,<br/>- rezygnacja z refaktoringu w gałęzi.</p>","devops-handbook-20-11-enable-and-practice-continuous-integration s:DevOps, 178"
"Jakie są praktyki pracy na rewizji master?","<p style=""text-align:left;"">Praktyki pracy na rewizji master:<br/>- często ewidencjonuj kod w rewizji master, np. raz dziennie,<br/>- &quot;gated commits&quot; (rewizje ogrodzone).</p>","devops-handbook-20-11-enable-and-practice-continuous-integration s:DevOps, 178"
"Co to jest &quot;gated commits&quot;?","<p style=""text-align:left;"">&quot;Gated commits&quot; (rewizje ogrodzone) to:<br/>- odrzucanie rewizji, które powodują naruszenie stanu gotowości do wdrożenia.</p>","devops-handbook-20-11-enable-and-practice-continuous-integration s:DevOps, 178"
"Co to jest &quot;kod gotowy&quot;?","<p style=""text-align:left;"">&quot;Kod gotowy&quot; to:<br/>- na koniec każdego interwału rozwoju,<br/>- kod zintegrowany, przetestowany, działający i potencjalnie gotowy do wdrożenia,<br/>- zademonstrowany w środowisku zbliżonym do produkcyjnego,<br/>- zbudowany na podstawie rewizji master w procesie inicjowanym jednym kliknięciem,<br/>- zweryfikowany za pomocą testów automatycznych.</p>","devops-handbook-20-11-enable-and-practice-continuous-integration s:DevOps, 179"
"Co to jest &quot;staging environment (stage)&quot;?","<p style=""text-align:left;"">&quot;Staging environment (stage)&quot; to:<br/>- środowisko preprodukcyjne/przedprodukcyjne.</p>","devops-handbook-20-11-enable-and-practice-continuous-integration s:DevOps, 181"
"Co to jest &quot;test kanarkowy&quot;?","<p style=""text-align:left;"">&quot;Test kanarkowy&quot; to:<br/>- wdrożenie oprogramowania na małej grupie serwerów produkcyjnych<br/>- w celu sprawdzenia, czy oprogramowanie nie ulegnie awarii pod realnym obciążeniem,<br/>- kanarek umierając ostrzega górnika.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 183"
"Jaka relacja jest między liczbą zmian i liczbą wydań?","<p style=""text-align:left;"">Relacja między liczbą zmian i liczbą wydań:<br/>- jeśli chcesz więcej zmian,<br/>- to potrzebujesz więcej wdrożeń,<br/>- wdrożenie obsługuje stałą liczbę zmian.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 184"
"Jakie są wymagania potoku wdrożeń?","<p style=""text-align:left;"">Wymagania potoku wdrożeń:<br/>- wdrażanie w każdym środowisku w taki sam sposób,<br/>- testy dymne wdrożeń,<br/>- utrzymywanie spójnych środowisk.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 186"
"Kto powinien wdrażać? Dev? Ops?","<p style=""text-align:left;"">Wdrożenia mogą być realizowane przez Dev lub Ops.<br/>Nie ma to wpływu na procent pomyślnych wdrożeń.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 190"
"Kiedy proces wdrażania kodu może być częścią potoku wdrożeń?","<p style=""text-align:left;"">Proces wdrażania kodu może być częścią potoku wdrożeń, gdy:<br/>- jest zautomatyzowany.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 190"
"Co powinna zapewniać automatyzacja wdrażania kodu?","<p style=""text-align:left;"">Automatyzacja wdrażania kodu powinna zapewniać:<br/>- możliwość wdrażania pakietów stworzonych w procesie ciągłej integracji,<br/>- błyskawiczną ocenę gotowości środowisk produkcyjnych,<br/>- samoobsługowe wdrażanie,<br/>- automatyczny zapis,<br/>- testy dymne,<br/>- szybka pętla sprzężenia zwrotnego.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 190"
"Czy wdrożenie i wydanie to to samo?","<p style=""text-align:left;"">Nie:<br/>- wdrożenie (deployment) to wdrożenia produkcyjne,<br/>- wydanie (release) to publikacja funkcjonalności.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 194"
"Co to jest wdrożenie?","<p style=""text-align:left;"">Wdrożenie (deployment) to:<br/>- instalacja określonej wersji oprogramowania,<br/>- wdrożenia produkcyjne,<br/>- może być związane z nowymi funkcjami.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 194"
"Co to jest wydanie?","<p style=""text-align:left;"">Wydanie (release) to:<br/>- proces udostępnienia nowych funkcji,<br/>- publikacja funkcjonalności.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 194"
"Jakie są kategorie wzorców wydań?","<p style=""text-align:left;"">Kategorie wzorców wydań:<br/>- wzorce wydań bazujące na środowisku,<br/>- wzorce wydań bazujące na aplikacjach.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 194"
"Czym są &quot;wzorce wydań bazujące na środowisku&quot;?","<p style=""text-align:left;"">&quot;Wzorce wydań bazujące na środowisku&quot; to:<br/>- &quot;żywy&quot; ruch klientów na jedno środowisko,<br/>- wdrożenie na inne środowisko,<br/>- wydanie poprzez przełączenie ruchu,<br/>- wdrożenia niebieski-zielony, wydania kanarkowe, systemy CIS (cluster immune systems).</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 195"
"Czym są &quot;wzorce wydań bazujące na aplikacjach&quot;?","<p style=""text-align:left;"">&quot;Wzorce wydań bazujące na aplikacjach&quot; to:<br/>- modyfikowanie aplikacji,<br/>- publikacja funkcjonalności, nawet pojedynczej funkcji za pomocą zmian w konfiguracji,<br/>- stopniowe rozszerzanie grupy odbiorców nowych funkcjonalności,<br/>- ślepe uruchamianie (dark launching),<br/>- staging.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 195"
"Co to jest &quot;wzorzec wdrażania niebieskie-zielone&quot;?","<p style=""text-align:left;"">&quot;Wzorzec wdrażania niebieskie-zielone&quot; to:<br/>- wzorzec wydań bazujący na środowisku,<br/>- dwa środowiska produkcyjne: niebieskie i zielone,<br/>- jedno obsługuje &quot;żywy ruch&quot;, drugie wdrożenia,<br/>- wydanie polega na przełączeniu.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 197"
"Jak obsługiwać zmiany w bazie danych we &quot;wzorce wydań bazujące na środowisku&quot;?","<p style=""text-align:left;"">Obsługa zmian w bazie danych we &quot;wzorce wydań bazujące na środowisku&quot;:<br/>- dwie bazy danych (niebieska i zielona): ryzyka utraty transakcji,<br/>- oddzielenie zmiany bazy danych od zmian w aplikacji: nie mutujemy istniejących obiektów bazy danych.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 198"
"Na czym polega &quot;oddzielenie zmiany bazy danych od zmian w aplikacji&quot; w ramach &quot;wzorce wydań bazujące na środowisku&quot;?","<p style=""text-align:left;"">&quot;Oddzielenie zmiany bazy danych od zmian w aplikacji&quot; w ramach &quot;wzorce wydań bazujące na środowisku&quot;:<br/>- inaczej &quot;rozwiń-zwiń&quot;,<br/>- rozwijamy poprzez dodawanie nowych obiektów,<br/>- następnie zwijamy poprzez usunięcie starych,<br/>- nie mutujemy istniejących obiektów bazy danych,<br/>- możliwe dublowanie danych.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 198"
"Co to jest &quot;wzorzec wydań kanarkowych&quot;?","<p style=""text-align:left;"">&quot;Wzorzec wydań kanarkowych&quot; to:<br/>- rodzaj &quot;wzorzec wdrażania niebieskie-zielone&quot;,<br/>- automatyzacja procesu wydań,<br/>- promowania do coraz ważniejszych środowisk,<br/>- kanarek umierając ostrzega górnika.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 200"
"Jakie są grupy środowisk wspierające &quot;wzorzec wydań kanarkowych&quot;?","<p style=""text-align:left;"">Grupy środowisk wspierających &quot;wzorzec wydań kanarkowych&quot;:<br/>- Grupa A1: serwery produkcyjne dla wewnętrznych pracowników,<br/>- Grupa A2: serwery produkcyjne dla niewielkiej grupy klientów,<br/>- Grupa A3: pozostałe serwery produkcyjne.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 200"
"Co to jest &quot;wzorzec CIS&quot;?","<p style=""text-align:left;"">Wzorzec CIS (cluster immune system, &quot;układ odpornościowy w formie klastra&quot;) to:<br/>- rozszerzenie &quot;wzorzec wydań kanarkowych&quot;,<br/>- wydawanie powiązane z monitorowaniem,<br/>- zautomatyzowane wycofywanie,<br/>- jeśli nie są spełniane warunki, np. wydajność.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 201"
"Jak zastosować &quot;wzorce wydań bazujące na aplikacjach&quot;?","<p style=""text-align:left;"">Aby zastosować &quot;wzorce wydań bazujące na aplikacjach&quot;:<br/>- zaimplementuj przełączniki cech funkcjonalnych.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 202"
"Czym są &quot;przełączniki cech funkcjonalnych&quot;?","<p style=""text-align:left;"">&quot;Przełączniki cech funkcjonalnych&quot; (feature toggles) to:<br/>- podstawowy sposób zastosowania wzorców wdrożeń na bazie aplikacji.<br/>- mechanizmu selektywnego włączania lub wyłączania cech funkcjonalnych,<br/>- np. poprzez plik konfiguracyjny aplikacji, usługę sieciową.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 202"
"Jakie operacje umożliwiają przełączniki cech funkcjonalnych?","<p style=""text-align:left;"">Przełączniki cech funkcjonalnych umożliwiają:<br/>- łatwe wycofywanie,<br/>- obniżanie wydajności &quot;z wdziękiem&quot;,<br/>- zwiększenie odporności dzięki wykorzystaniu architektury zorientowanej na usługi.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 202"
"Co to jest obniżanie wydajności &quot;z wdziękiem&quot;?","<p style=""text-align:left;"">Obniżanie wydajności &quot;z wdziękiem&quot; to:<br/>- jedna z operacji umożliwianych przez przełączniki cech funkcjonalnych,<br/>- stosowane, gdy obciążenie usługi jest zbyt wysokie,<br/>- obniżenie jakości usługi,<br/>- obniżenie poziomu dostarczanych funkcjonalności,<br/>- np. wyłączenie funkcji.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 202"
"Co to jest &quot;zwiększenie odporności dzięki wykorzystaniu architektury zorientowanej na usługi&quot;?","<p style=""text-align:left;"">&quot;Zwiększenie odporności dzięki wykorzystaniu architektury zorientowanej na usługi&quot; to:<br/>- jedna z operacji umożliwianych przez przełączniki cech funkcjonalnych,<br/>- ukrycie za przełącznikiem funkcji,<br/>- która korzysta z innej, jeszcze niegotowej funkcji.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 202"
"Co to jest &quot;HDD (hypothesis-driven development)&quot;?","<p style=""text-align:left;"">&quot;HDD (hypothesis-driven development)&quot; (wytwarzanie oprogramowania sterowane hipotezami) to:<br/>- wytwarzanie oprogramowania<br/>- jako serii eksperymentów w celu ustalenia, czy oczekiwany wynik zostanie osiągnięty.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 203"
"Co to jest &quot;testowanie A/B&quot;?","<p style=""text-align:left;"">&quot;Testowanie A/B&quot; to:<br/>- metoda badawcza polegająca na porównaniu dwóch wersji celem wybrania lepszej.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:https://pl.wikipedia.org/wiki/Test_A/B"
"Co to jest &quot;ślepe uruchamianie&quot;?","<p style=""text-align:left;"">&quot;Ślepe uruchamianie&quot; (dark launching) to:<br/>- wdrożenie na produkcji, testy, gdy funkcjonalność niewidoczna dla klientów,<br/>- stopniowa aktywacja dla niewielkich segmentów klientów,<br/>- możliwe za pomocą &quot;przełączników cech funkcjonalnych&quot;.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 196, 203"
"Wyjaśnij &quot;ciągła integracja&quot; vs. &quot;ciągłe dostarczanie&quot; vs. &quot;ciągłe wdrażanie&quot;?","<p style=""text-align:left;"">- &quot;ciągła integracja&quot; (continuous integration): ciągłe scalane z rewizją master,<br/>- &quot;ciągłe dostarczanie&quot; (continuous delivery): ciągła gotowość do wydania na żądanie, rozwinięcie &quot;ciągła integracja&quot;,<br/>- &quot;ciągłe wdrażanie&quot; (continuous deployment): ciągłe wdrażanie, rozwinięcie &quot;ciągłe dostarczanie&quot;.</p>","devops-handbook-21-12-automate-and-enable-low-risk-releases s:DevOps, 206"
"Co to jest &quot;doświadczenie bliskie śmierci&quot;?","<p style=""text-align:left;"">&quot;Doświadczenie bliskie śmierci&quot; to:<br/>- skrajne utrudnienie rozwoju i utrzymania systemu,<br/>- wskutek długu technicznego,<br/>- wskutek problemów architektonicznych.</p>","devops-handbook-22-13-architect-for-low-risk-releases s:DevOps, 209"
"Co to jest &quot;strangler application pattern&quot;?","<p style=""text-align:left;"">&quot;Strangler application pattern&quot; (wzorzec dusiciela) to:<br/>- stopniowe zastępowanie całego systemu,<br/>- zamiast &quot;wycofywać i wymieniać&quot;,<br/>- ukrywanie wywołań do starego systemu za API, zaniechanie zmian,<br/>- nowe funkcjonalności za pomocą nowych usług.</p>","devops-handbook-22-13-architect-for-low-risk-releases s:DevOps, 210"
"Jak brzmi &quot;drugie prawo architektonicznej termodynamiki&quot;?","<p style=""text-align:left;"">&quot;Drugie prawo architektonicznej termodynamiki&quot;:<br/>- zmniejszenie ogólnej złożoności,<br/>- i zwiększanie wydajności pracy wszystkich zespołów programistycznych,<br/>- rzadko jest celem indywidualnego projektu.</p>","devops-handbook-22-13-architect-for-low-risk-releases s:DevOps, 211"
"Jaka architektura, ułatwia wydajność, testowalność i bezpieczeństwo?","<p style=""text-align:left;"">Architektura, która ułatwia wydajność, testowalność i bezpieczeństwo to:<br/>- o luźnych sprzężeniach,<br/>- z dobrze zdefiniowanymi interfejsami, które wymuszają sposób połączenia modułów ze sobą,<br/>- zorientowana na usługi.</p>","devops-handbook-22-13-architect-for-low-risk-releases s:DevOps, 211"
"Jakie są archetypy architektoniczne?","<p style=""text-align:left;"">Archetypy architektoniczne:<br/>- monolityczna v1: cała funkcjonalność w jednej aplikacji,<br/>- monolityczna v2: zbiór monolitycznych warstw: &quot;fronton prezentacyjny&quot;, &quot;serwer aplikacji&quot;, &quot;warstwa bazy danych&quot;,<br/>- mikrousługi: modularne, niezależne relacje grafowe zamiast warstw, utrwalanie w izolacji.</p>","devops-handbook-22-13-architect-for-low-risk-releases s:DevOps, 213"
"Czym są &quot;wersjonowane interfejsy API&quot; (application strangler)?","<p style=""text-align:left;"">Wersjonowane interfejsy API:<br/>- inaczej usługi wersjonowane (versioned services),<br/>- inaczej usługi niezmienialne (immutable services),<br/>- API przykrywające wywołania do starego systemu,<br/>- używane we wzorcu application strangler.</p>","devops-handbook-22-13-architect-for-low-risk-releases s:DevOps, 215"
"Co to jest &quot;technika rozgałęziania przez abstrakcję&quot;?","<p style=""text-align:left;"">&quot;Technika rozgałęziania przez abstrakcję&quot; (branching by abstraction) to:<br/>- stworzeniu warstwy abstrakcji pomiędzy zmienianymi obszarami,<br/>- pozwala na ewolucyjne projektowanie architektury,<br/>- pozwala na pracę na gałęzi master i stosowanie ciągłej integracji.</p>","devops-handbook-22-13-architect-for-low-risk-releases s:DevOps, 216"
"Na czym polega druga droga?","<p style=""text-align:left;"">Druga droga polega na:<br/>- szybkie i ciągłe sprzężenie zwrotne od Ops do Dev,<br/>- skracanie i wzmacnianie pętli sprzężenia zwrotnego,<br/>- integracja wiedzy dołu strumienia z Ops, Dev, kierownictwem.<br/>- telemetria.</p>","devops-handbook-24-part-iv-introduction s:DevOps, 223"
"Jakie są cele telemetrii?","<p style=""text-align:left;"">Cele telemetrii:<br/>- dostrzeganie problemów,<br/>- dostarczanie informacji pomocnej w rozwiązywaniu problemów.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 225"
"Co to jest &quot;kultura przyczynowości&quot;?","<p style=""text-align:left;"">&quot;Kultura przyczynowości&quot; (culture of causality) to:<br/>- zrozumienie awarii,<br/>- koncentracja na rozwiązywaniu problemów,<br/>- zamiast ślepego restartowania serwerów.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 226"
"Co to jest &quot;telemetria&quot;?","<p style=""text-align:left;"">&quot;Telemetria&quot; to:<br/>- zautomatyzowany proces komunikacji,<br/>- w wyniku którego pomiary oraz inne dane są gromadzone w zdalnych punktach,<br/>- a następnie są przesyłane do urządzeń odbiorczych w celu monitorowania.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 226"
"Co to jest MTTR?","<p style=""text-align:left;"">MTTR (Mean Time To Repair) to:<br/>- średni czas od momentu wystąpienia awarii do naprawy.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 227"
"Jak zapewnić niski MTTR?","<p style=""text-align:left;"">Aby zapewnić niski MTTR:<br/>- repozytorium kontroli wersji dla Ops,<br/>- telemetria i proaktywne monitorowanie.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 227"
"Jakie są składniki architektury monitorowania?","<p style=""text-align:left;"">Składniki architektury monitorowania:<br/>- zbieranie danych w warstwach logiki biznesowej, aplikacji i środowiska: pliki logów, dzienniki zdarzeń,<br/>- router zdarzeń odpowiedzialny za przechowywanie zdarzeń i parametrów: wykresy, alarmy.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 229"
"Dla jakich funkcjonalności tworzyć mechanizmy telemetrii?","<p style=""text-align:left;"">Jeśli:<br/>- funkcjonalność została zaimplementowana,<br/>to:<br/>- zasługuje na stworzenie mechanizmów telemetrii.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 231"
"Jakie są poziomy rejestrowania informacji?","<p style=""text-align:left;"">Poziomy rejestrowania informacji:<br/>DEBUG, INFO, WARN, ERROR, FATAL.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 232"
"Jakie są negatywne efekty braku dostępnej publicznie telemetrii?","<p style=""text-align:left;"">Negatywne efekty braku dostępnej publicznie telemetrii:<br/>- budowanie kultury obwiniania,<br/>- niezdolność do budowania wiedzy.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 233"
"Jak ułatwić dostęp do telemetrii?","<p style=""text-align:left;"">Aby ułatwić dostęp do telemetrii:<br/>- samoobsługa,<br/>- każdy zainteresowany ma łatwy dostęp.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 236"
"Co to jest &quot;promiennik informacji&quot;? (information radiator)","<p style=""text-align:left;"">&quot;Promiennik informacji&quot; (information radiator) to:<br/>- mechanizm udostępniania danych,<br/>- tablica informacyjna, publicznie dostępna, przezroczystość,<br/>- zespół nie ma nic do ukrycia przed gośćmi,<br/>- zespół nie ma nic do ukrycia przed samym sobą.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 236"
"Jakie są poziomy telemetrii?","<p style=""text-align:left;"">Poziomy telemetrii:<br/>- poziom biznesowy,<br/>- poziom aplikacji,<br/>- poziom infrastruktury,<br/>- poziom oprogramowania klienckiego,<br/>- poziom potoku wdrożeń.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 239"
"Co to jest &quot;lejek nabywania klienta&quot;?","<p style=""text-align:left;"">&quot;Lejek nabywania klienta&quot; (customer acquisition funnel) to:<br/>- zawiera wskaźniki biznesowe,<br/>- określa teoretyczne kroki potencjalnego klienta.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 240"
"Jaką rolę pełnią wskaźniki biznesowe w kontekście parametrów infrastruktury?","<p style=""text-align:left;"">Wskaźniki biznesowe tworzą kontekst dla parametrów infrastruktury.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 243"
"Co to jest &quot;okres rozstrzygania&quot;?","<p style=""text-align:left;"">&quot;Okres rozstrzygania&quot; to:<br/>- przejściowy okres niższej jakości usługi,<br/>- ze względu na przejściowe problemy wynikające z wdrożenia nowej funkcjonalności,<br/>- np. chybione wyszukiwania w pamięci podręcznej.</p>","devops-handbook-25-14-create-telemetry-to-enable-seeing-and-solving-problems s:DevOps, 243"
"Co to jest &quot;wykrywanie odstających&quot;?","<p style=""text-align:left;"">&quot;Wykrywanie odstających&quot; (outlier detection) to:<br/>- technika statystyczna,<br/>- wykrywanie nieprawidłowych warunków działania,<br/>- które mogą spowodować znaczące obniżenie wydajności,<br/>- identyfikacja węzłów spoza wzorca,<br/>- usunięcie z produkcji.</p>","devops-handbook-26-15-analyze-telemetry-to-better-anticipate-problems-and-achieve-goals s:DevOps, 246"
"Które techniki statystyczne pomagają w wykrywaniu problemów?","<p style=""text-align:left;"">Techniki statystyczne, które pomagają w wykrywaniu problemów:<br/>- średnia,<br/>- odchylenie standardowe,<br/>- analiza parametrów produkcyjnych,</p>","devops-handbook-26-15-analyze-telemetry-to-better-anticipate-problems-and-achieve-goals s:DevOps, 246"
"Jak techniki statystyczne pomagają w wykrywaniu problemów?","<p style=""text-align:left;"">Techniki statystyczne pomagają w wykrywaniu problemów:<br/>- np. alert, gdy liczba prób nieuprawnionego logowania przekroczy wartość trzech odchyleń standardowych powyżej średniej.</p>","devops-handbook-26-15-analyze-telemetry-to-better-anticipate-problems-and-achieve-goals s:DevOps, 247"
"Co monitorować?","<p style=""text-align:left;"">Monitoruj (dąż do):<br/>- wskaźniki przewidujące awarię,<br/>- nie awarie.</p>","devops-handbook-26-15-analyze-telemetry-to-better-anticipate-problems-and-achieve-goals s:DevOps, 248"
"Na czym polega problem z technikami statystycznymi w wykrywaniu problemów?","<p style=""text-align:left;"">Problem z technikami statystycznymi w wykrywaniu problemów:<br/>- nie wszystkie zestawy danych mają rozkład Gaussa.</p>","devops-handbook-26-15-analyze-telemetry-to-better-anticipate-problems-and-achieve-goals s:DevOps, 249"
"Jak wykrywać problemy, gdy zestawy danych nie mają rozkładu Gaussa?","<p style=""text-align:left;"">Żeby wykrywać problemy, gdy zestawy danych nie mają rozkładu Gaussa to:<br/>- użyj technik wykrywania anomalii,<br/>- wyszukuj elementy niezgodne ze wzorcem.</p>","devops-handbook-26-15-analyze-telemetry-to-better-anticipate-problems-and-achieve-goals s:DevOps, 253"
"Co to jest &quot;wygładzanie&quot;?","<p style=""text-align:left;"">&quot;Wygładzanie&quot; (smoothing) to:<br/>- technika statystyczna,<br/>- uzycie średnich ruchomych (kroczących).</p>","devops-handbook-26-15-analyze-telemetry-to-better-anticipate-problems-and-achieve-goals s:DevOps, 253"
"Kto się boi wdrażać kod?","<p style=""text-align:left;"">Wdrażać kod boją się wszyscy, i Dev, i Ops.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 260"
"Jak zwiększyć bezpieczeństwo wdrożeń?","<p style=""text-align:left;"">Aby zwiększyć bezpieczeństwo wdrożeń:<br/>- wdróż sprzężenia zwrotne w całym strumieniu wartości,<br/>- użyj telemetrii,<br/>- optymalizuj pod kątem MTTR (zamiast MTBF).</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 260"
"Co to jest MTBF?","<p style=""text-align:left;"">MTBF (mean time between failures) to:<br/>- średni czas bezawaryjnej pracy.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:https://pl.wikipedia.org/wiki/MTBF"
"Co to jest &quot;poprawka w przód&quot;?","<p style=""text-align:left;"">&quot;Poprawka w przód&quot; (fix forward) to:<br/>- wprowadzanie w kodzie zmian, które eliminują wady,<br/>- a następnie przenieść je do produkcji za pośrednictwem potoku wdrożeń.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 262"
"Jak naprawiać defekty szybciej?","<p style=""text-align:left;"">Aby naprawiać defekty szybciej:<br/>- wprowadź wspólne dyżury Dev i Ops,<br/>- budź programistów o 2 w nocy,<br/>- uświadom Dev, że &quot;gotowe&quot; oznacza również bezproblemowe w Ops.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 263"
"Czym są &quot;zapytania kontekstowe&quot;?","<p style=""text-align:left;"">&quot;Zapytania kontekstowe&quot; to:<br/>- technik w projektowaniu UX,<br/>- obserwacja użytkowania aplikacji na produkcji,<br/>- przez programistów,<br/>- np. przy biurku klienta,<br/>- w konsekwencji programiści tworzą lepiej.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 264"
"Co to jest &quot;UX&quot;?","<p style=""text-align:left;"">&quot;UX&quot; (user experience, doświadczenie użytkownika) to:<br/>- wrażenia użytkownika podczas korzystania z produktu.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:https://pl.wikipedia.org/wiki/User_experience"
"Co to jest &quot;mechanizm odsyłania usługi&quot;?","<p style=""text-align:left;"">&quot;Mechanizm odsyłania usługi&quot; (service handback mechanism) to:<br/>- gdy usługa produkcyjna staje się krucha,<br/>- to Ops może przekazać utrzymanie usługi do Dev,<br/>- zapobiega powiększaniu długu technicznego.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 268"
"Co to jest &quot;SRE&quot;?","<p style=""text-align:left;"">&quot;SRE&quot; (Site Reliability Engineers, inżynierowie niezawodności ośrodka) to:<br/>- inaczej inżynier Ops.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 269"
"Na czym polegają procesy LRR i HRR?","<p style=""text-align:left;"">Procesy LRR i HRR polegają na:<br/>- LRR (Launch Readiness Review), pierwszy etap publikowania nowej usługi, publikuje i utrzymuje Dev,<br/>- HRR (Hand-Off Readiness Review), drugi etap, utrzymanie przechodzi do Ops,<br/>- listy kontrolne podobne, ale HRR bardziej restrykcyjna.</p>","devops-handbook-27-16-enable-feedback-so-development-and-operations-can-safely-deploy-code s:DevOps, 270"
"Jakie pytanie należy zadać przed rozpoczęciem budowy funkcjonalności?","<p style=""text-align:left;"">Przed rozpoczęciem budowy funkcjonalności należy zapytać:<br/>- czy powinniśmy budować tę funkcjonalność i dlaczego?</p>","devops-handbook-28-17-integrate-hypothesis-driven-development-and-a-b-testing-into-our-daily-work s:DevOps, 273"
"Jakie techniki pomagają określić, czy przewidywana funkcjonalność rzeczywiście pozwoli osiągnąć pożądane rezultaty?","<p style=""text-align:left;"">Techniki, które pomagają określić, czy przewidywana funkcjonalność rzeczywiście pozwoli osiągnąć pożądane rezultaty:<br/>- wytwarzanie oprogramowania sterowane hipotezami (hypothesis-driven development),<br/>- lejki popytu (customer acquisition funnels),<br/>- testowanie A/B,<br/>- ankiety, prototypy, testy użyteczności.</p>","devops-handbook-28-17-integrate-hypothesis-driven-development-and-a-b-testing-into-our-daily-work s:DevOps, 273"
"Jak zintegrować testy A/B z procesem testowania/publikowania/planowania cechy funkcjonalnej?","<p style=""text-align:left;"">Aby zintegrować testy A/B z procesem testowania cechy funkcjonalnej:<br/>- na przykład losowo wyświetlaj witrynę w wersji A albo B,<br/>- przeanalizuj różnicę wyników,<br/>- zdolność eksperymentowania rośnie z liczbą wdrożeń.</p>","devops-handbook-28-17-integrate-hypothesis-driven-development-and-a-b-testing-into-our-daily-work s:DevOps, 276, 277, 278"
"Jakie są inne nazwy testów A/B?","<p style=""text-align:left;"">Testy A/B to inaczej:<br/>- kontrolowane eksperymenty online,<br/>- testy podziału (split tests),<br/>- testowanie wielu zmiennych.</p>","devops-handbook-28-17-integrate-hypothesis-driven-development-and-a-b-testing-into-our-daily-work s:DevOps, 276"
"Jak zmniejszyć ryzyko wprowadzania zmian zanim zostaną wprowadzone?","<p style=""text-align:left;"">Aby zmniejszyć ryzyko wprowadzania zmian zanim zostaną wprowadzone:<br/>- stosuj &quot;pull request&quot;.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 281"
"Co to jest &quot;pull request&quot;?","<p style=""text-align:left;"">&quot;Pull request&quot; (żądanie ściągnięcia) to:<br/>- forma wzajemnego przeglądania kodu,<br/>- uwzględnia Dev i Ops,<br/>- zainteresowani mogą przejrzeć, omówić, zmodyfikować.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 281"
"Co to jest &quot;GitHub Flow&quot;?","<p style=""text-align:left;"">&quot;GitHub Flow&quot; to:<br/>- tworzenie nowej gałęzi,<br/>- praca na nowej gałęzi,<br/>- &quot;pull request&quot;,<br/>- scalenie do master,<br/>- wdrożenie na produkcję.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 282https://guides.github.com/introduction/flow/"
"Co to jest &quot;myślenie alternatywne&quot;?","<p style=""text-align:left;"">&quot;Myślenie alternatywne&quot; (counterfactual thinking) to:<br/>- ludzka skłonność do tworzenia alternatyw zdarzeń, które już się wydarzyły,<br/>- opis &quot;systemu zgodnego z wyobrażeniami&quot; w przeciwieństwie do &quot;systemu w rzeczywistości&quot;.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 283"
"Jakie są niebezpieczeństwa związane z procesami zatwierdzania zmian?","<p style=""text-align:left;"">Niebezpieczeństwa związane z procesami zatwierdzania zmian:<br/>- jeśli panuje kultura niskiego zaufania, dowodzenia, kontroli,<br/>- to praktyki DevOps (zarządzanie zmianami, testowanie),<br/>- mogą prowadzić do większych problemów.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 284"
"Jakie są potencjalne zagrożenia związane ze &quot;zbytnim kontrolowaniem zmian&quot;?","<p style=""text-align:left;"">Potencjalne zagrożenia związane ze &quot;zbytnim kontrolowaniem zmian&quot; to:<br/>- długie czasy realizacji,<br/>- zmniejszenie siły i szybkości sprzężenia zwrotnego,<br/>- dodatkowe pytania, zatwierdzania, oceniania,<br/>- zamiast kontroli zewnętrznej, przeglądy współpracowników.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 284"
"Jakie są techniczne środki zaradcze na zagrożenia?","<p style=""text-align:left;"">Techniczne środki zaradcze na zagrożenia:<br/>- redundancja,<br/>- mechanizmy pracy awaryjnej (failover): awaryjne przełączanie na rezerwowy system,<br/>- kompleksowe testy,<br/>- symulacje.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 287"
"Czym są &quot;przeglądy kodu&quot;?","<p style=""text-align:left;"">Przeglądy kodu (code review) to:<br/>- wzajemne przeglądy dokonywanych zmian,<br/>- kodu, środowisk, baz danych,<br/>- poprawa jakości, wzajemna nauka,<br/>- jedna lub więcej opinii,<br/>- w przeciwieństwie do zatwierdzeń przez zewnętrzne organy przed wdrażaniem.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 287"
"Jakie są wskazówki dotyczące przeglądów kodu?","<p style=""text-align:left;"">Wskazówki dotyczące przeglądów kodu:<br/>- każda zmiana przed wprowadzeniem do master podlega przeglądowi kodu,<br/>- każdy monitoruje zmiany w master,<br/>- zmiany wysokiego ryzyka są identyfikowane,<br/>- zbyt duża zmiana jest dzielona.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 288"
"Jakie są formy przeglądu kodu?","<p style=""text-align:left;"">Formy przeglądu kodu:<br/>- programowanie w parach,<br/>- &quot;zapuszczanie żurawia&quot;,<br/>- wiadomości e-mail z powiadomieniami o zmianach,<br/>- przegląd kodu z wykorzystaniem narzędzi.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 288"
"Jakie są potencjalne zagrożenia wynikające z większego udziału testów ręcznych?","<p style=""text-align:left;"">Potencjalne zagrożenia wynikające z większego udziału testów ręcznych:<br/>- awaria,<br/>- więcej testów, również ręcznych,<br/>- testy ręczne są wolniejsze i bardziej uciążliwe niż testy automatyczne,<br/>- dłuższy okres testowania,<br/>- rzadsze wdrażanie,<br/>- większa paczka,<br/>- zwiększenie paczki powoduje pogorszenie wdrożenia (trudne, więcej błędów, dłuższe naprawy).</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 290"
"Co to jest &quot;programowanie w parach&quot;?","<p style=""text-align:left;"">&quot;Programowanie w parach&quot;:<br/>- inaczej praca parami (pairing),<br/>- inaczej programowanie parami (pair programming),<br/>- dwóch inżynierów współpracuje na tej samej stacji roboczej,<br/>- kierowca i nawigator lub  obserwator,<br/>- stosowane nie tylko przez programistów.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 291"
"Na czym polega programowanie w parach w kontekście TDD?","<p style=""text-align:left;"">Programowanie w parach w kontekście TDD polega na:<br/>- jeden inżynier pisze zautomatyzowane testy,<br/>- drugi inżynier implementuje kod.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 291"
"Jakie są zalety &quot;programowanie w parach&quot;?","<p style=""text-align:left;"">Zalety &quot;programowanie w parach&quot;:<br/>- mniej błędów,<br/>- rozważone więcej możliwości projektowych,<br/>- wzajemna nauka,<br/>- chociaż programiści wolniejsi.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 292"
"Jak weryfikować skuteczność przeglądu kodu przez współpracowników?","<p style=""text-align:left;"">Aby weryfikować skuteczność przeglądu kodu przez współpracowników:<br/>- obserwuj przestoje produkcyjne i analizuj proces przeglądu dla wszelkich istotnych zmian.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 293"
"Czym charakteryzuje się dobre żądanie ściągnięcia (pull request)?","<p style=""text-align:left;"">Dobre żądanie ściągnięcia (pull request) posiada:<br/>- kontekst dla czytelnika,<br/>- dokumentację lub opis,<br/>- uzasadnienie,<br/>- wskazanie zagrożeń,<br/>- opis środków zaradczych,<br/>- pomysły na ulepszenia,<br/>- dyskusja rozwiązania,<br/>- czasem kilka stron dokumentacji.</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 293"
"Jak eliminować przeszkody organizacyjne?","<p style=""text-align:left;"">Aby eliminować przeszkody organizacyjne:<br/>- stosuj programowanie w parach (zamiast przeglądów zewnętrznych),<br/>- zaproponuj utrzymanie przez Dev (dla nowych technologii),<br/>- uczyń programistę odpowiedzialnym za zmianę (i zapewnienie weryfikacji).</p>","devops-handbook-29-18-create-review-and-coordination-processes-to-increase-quality-of-our-current-work s:DevOps, 296"
"Co to jest &quot;Trzecia droga: Techniczne praktyki ciągłego uczenia się i eksperymentowania&quot;?","<p style=""text-align:left;"">&quot;Trzecia droga: Techniczne praktyki ciągłego uczenia się i eksperymentowania&quot; to:<br/>- praktyki umożliwiające uczenie się,<br/>- tak szybko, wcześnie, często i tanio, jak to możliwe.</p>","devops-handbook-31-part-v-introduction s:DevOps, 301"
"Jakie praktyki składają się na &quot;Trzecia droga: Techniczne praktyki ciągłego uczenia się i eksperymentowania&quot;?","<p style=""text-align:left;"">Praktyki &quot;Trzecia droga: Techniczne praktyki ciągłego uczenia się i eksperymentowania&quot;:<br/>- praktyki uczenia się na podstawie wypadków i awarii,<br/>- praktyki organizowania i projektowania systemów pracy aby stale eksperymentować i uczyć się.</p>","devops-handbook-31-part-v-introduction s:DevOps, 301"
"Jakie mechanizmy składają się na &quot;Trzecia droga: Techniczne praktyki ciągłego uczenia się i eksperymentowania&quot;?","<p style=""text-align:left;"">Mechanizmy &quot;Trzecia droga: Techniczne praktyki ciągłego uczenia się i eksperymentowania&quot;:<br/>- &quot;kultura uczciwości&quot;: warunki dla bezpiecznej pracy,<br/>- wstrzykiwanie awarii produkcyjnych: odporność,<br/>- konwersja lokalnych odkryć na globalne usprawnienia,<br/>- rezerwacja czasu na stworzenie organizacyjnych mechanizmów usprawnień i uczenia się.</p>","devops-handbook-31-part-v-introduction s:DevOps, 301"
"Co to jest &quot;elastyczna organizacja&quot;?","<p style=""text-align:left;"">&quot;Elastyczna organizacja&quot; to organizacja, która:<br/>- wykrywa problemy,<br/>- rozwiązuje problemy,<br/>- udostępnia rozwiązania w całej organizacji.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 303"
"Jak zbudować &quot;elastyczną organizację&quot;?","<p style=""text-align:left;"">Zbuduj dynamiczny system uczenia się.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 303"
"Co to jest &quot;dynamiczny system uczenia się&quot;?","<p style=""text-align:left;"">&quot;Dynamiczny system uczenia się&quot; to system, który:<br/>- pozwala zrozumieć popełniane błędy,<br/>- przekształca zrozumienie na działania, które zapobiegają powtórzeniu podobnych błędów w przyszłości.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 303"
"Co to jest &quot;Chaos Monkey&quot;?","<p style=""text-align:left;"">&quot;Chaos Monkey&quot; to:<br/>- narzędzie zbudowane przez Netflix,<br/>- wstrzykuje błędy do infrastruktury,<br/>- doprowadziło do stworzenia usługi odpornej na rzeczywistą awarię Amazona,<br/>- przykład ciągłego uczenia się i eksperymentowania.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 304"
"Co to jest &quot;kultura sprawiedliwości&quot;?","<p style=""text-align:left;"">&quot;Kultura sprawiedliwości&quot; (just culture) to kultura, która:<br/>- traktuje błąd jako okazję do nauki,<br/>- nie karze za błędy,<br/>- uznaje, że błąd człowieka jest konsekwencją narzędzi.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 306"
"Co pomaga tworzyć kulturę sprawiedliwości i uczenia się?","<p style=""text-align:left;"">Kulturę sprawiedliwości pomagają tworzyć praktyki:<br/>- &quot;analiza post-mortem bez poszukiwania winnych&quot;: analiza wydarzeń i decyzji w czasie bliskim awarii,<br/>- kontrolowane wprowadzanie awarii do produkcji: stworzenie możliwości do ćwiczenia zachowań w sytuacjach awaryjnych.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 306"
"Jaki są warunki skutecznej &quot;analizy post-mortem&quot;?","<p style=""text-align:left;"">Warunki skutecznej &quot;analizy post-mortem&quot;:<br/>- natychmiast po wystąpieniu awarii,<br/>- opracowanie chronologii istotnych wydarzeń,<br/>- zebranie interesariuszy,<br/>- współdzielenie informacji bez obaw o karę lub odwet,<br/>- burza mózgów,<br/>- zaprojektowanie środków zaradczych,<br/>- opracowanie planu wdrożenia środków zaradczych,<br/>- opublikowanie wniosków dla jak najszerszego grona odbiorców.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 308"
"Czym powinien się charakteryzować &quot;środek zaradczy&quot;?","<p style=""text-align:left;"">&quot;Środek zaradczy&quot; powinien:<br/>- uniemożliwić popełnienie podobnego błędu w przyszłości,<br/>- bez założenia, że pracownicy będą &quot;lepsi&quot; (np. bardziej uważni).</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 308"
"Podaj przykład środka zaradczego &quot;analizy post-mortem&quot;.","<p style=""text-align:left;"">Przykład środka zaradczego &quot;analizy post-mortem&quot;:<br/>- nowe automatyczne testy podczas wdrożenia.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 308"
"Jak poprawiać zarządzanie i rozumienie systemu w którym działamy (w kontekście awarii)?","<p style=""text-align:left;"">W celu poprawy zarządzania i rozumienia systemu w którym działamy:<br/>- wyszukuj coraz słabsze sygnały awarii (zmniejszaj próg tolerancji awarii),<br/>- analizuj sytuacje, w których o mało nie doszło do awarii,<br/>- wszelkie prace w strumieniu wartości technologii traktować jako eksperymentalne.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 310"
"Dlaczego organizacje stosujące praktyki DevOps częściej mają awarię?","<p style=""text-align:left;"">Organizacje stosujące praktyki DevOps częściej mają awarię, bo:<br/>- wysokowydajne organizacje publikują kilkadziesiąt razy częściej,<br/>- są bardziej otwarte na eksperymenty.<br/>Uwagi:<br/>- na podstawie raportu &quot;Raport 2014 State of DevOps Report&quot;,<br/>- dużo więcej wdrożeń nawet przy niższym współczynniku, to większa liczba awarii.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 312"
"Czym są &quot;dni gier&quot; (w kontekście awarii)?","<p style=""text-align:left;"">&quot;Dni gier&quot; (game days) to zaplanowane symulacje awarii:<br/>- określenie awarii,<br/>- przygotowanie środków zaradczych,<br/>- przeprowadzenie awarii.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 314"
"Co to jest &quot;inżynieria odporności&quot;?","<p style=""text-align:left;"">&quot;Inżynieria odporności&quot; (resilience engineering) to:<br/>- ćwiczenia mające na celu zwiększenie odporności poprzez iniekcję awarii na dużą skalę w kluczowych systemach.</p>","devops-handbook-32-19-enable-and-inject-learning-into-daily-work s:DevOps, 314"
"Jak poprawić odporność systemu pracy?","<p style=""text-align:left;"">Odporność systemu pracy poprawiają:<br/>- proaktywne planowanie,<br/>- testowanie scenariuszy awarii.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 317"
"Jak usprawnić komunikację między zespołami?","<p style=""text-align:left;"">Sposoby usprawnienia komunikacji między zespołami:<br/>- wykonywanie prac za pomocą poleceń w chat roomie,<br/>- emitowanie komunikatów w chat roomie podczas prac,<br/>- rejestrowanie i upublicznianie całej komunikacji,<br/>- komunikacja jako dokumentacja prac i praktyk.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 318"
"Jak zwiększyć zgodność organizacji z przepisami?","<p style=""text-align:left;"">Zgodność organizacji z przepisami jest proporcjonalna do stopnia, w jakim przepisy są wyrażone w kodzie.<br/>Czyli automatyzacja.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 319"
"Ile repozytoriów kodu powinna posiadać organizacja?","<p style=""text-align:left;"">Organizacja powinna posiadać jedno repozytorium kodu:<br/>- możliwość wykorzystywania doświadczeń wszystkich osób w organizacji,<br/>- kodowanie i współdzielenie wiedzy.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 320, 321"
"Co powinno być umieszczane w repozytorium kodu?","<p style=""text-align:left;"">W repozytorium kodu powinny być umieszczane:<br/>- kod źródłowy,<br/>- architektura jako kod,<br/>- standardy konfiguracji,<br/>- narzędzia do instalacji,<br/>- standardy i narzędzia testowania, w tym zabezpieczenia,<br/>- narzędzia obsługi potoku wdrożeń,<br/>- narzędzia monitorowania i analizy,<br/>- samouczki i standardy.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 321, 327"
"Jaką rolę pełnią testy automatyczne w rozpowszechnianiu wiedzy?","<p style=""text-align:left;"">Testy automatyczne, szczególnie TDD:<br/>- stanowią specyfikację systemu,<br/>- pokazują dobre praktyki użycia.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 322"
"Podaj przykłady wymagań niefunkcjonalnych ułatwiających wdrożenia.","<p style=""text-align:left;"">Przykłady wymagań niefunkcjonalnych ułatwiających wdrożenia:<br/>- odpowiednia liczba wskaźników telemetrycznych w aplikacji i środowiskach,<br/>- możliwość dokładnego śledzenia zależności,<br/>- odpowiednia elastyczność usług oraz degradacji,<br/>- zgodność pomiędzy wersjami,<br/>- możliwość archiwizacji danych,<br/>- możliwość łatwej analizy logów,<br/>- możliwość śledzenia żądań od użytkowników,<br/>- proste, scentralizowane środowisko działania z wykorzystaniem flag funkcji i podobnych mechanizmów.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 322"
"Jak zapewnić powtarzalność zadań operacyjnych?","<p style=""text-align:left;"">W celu zapewnienia powtarzalności zadań operacyjnych:<br/>- automatyzuj całość lub część,<br/>- standaryzuj i dokumentuj,<br/>- twórz historyjki użytkownika Ops.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 324"
"Na czym polega standaryzacja stosu technologii?","<p style=""text-align:left;"">Standaryzacja stosu technologii polega na:<br/>- wybraniu technologii pomagających osiągnąć cele organizacji,<br/>- maksymalizacja wydajności zespołu vs. cele całej organizacji,<br/>- wspólne uzgodnienie Dev i Ops.<br/>Zwykle miękkie granice obejmujące niewielką liczbę technologii.</p>","devops-handbook-33-20-convert-local-discoveries-into-global-improvements s:DevOps, 325"
"Co to jest &quot;improvement blitz&quot;?","<p style=""text-align:left;"">&quot;Improvement blitz&quot; (czasami &quot;kaizen blitz&quot;) to:<br/>- jedna z praktyk Toyota Production System,<br/>- dedykowany i skoncentrowany okres do rozwiązania określonego problemu,<br/>- zwykle kilka dni.</p>","devops-handbook-34-21-reserve-time-to-create-organizational-learning-and-improvement s:DevOps, 329"
"Jak wyegzekwować praktyki rezerwowania czasu na prace związane z usprawnieniami?","<p style=""text-align:left;"">W celu znalezienia czasu na usprawnienia przeprowadzaj:<br/>- najlepiej &quot;improvement blitz&quot;,<br/>- również &quot;spring&quot;, &quot;fall cleanings&quot;, &quot;ticket queue inversion weeks&quot;, &quot;hack days&quot;, &quot;hackathon&quot;, &quot;20% innovation time&quot;.</p>","devops-handbook-34-21-reserve-time-to-create-organizational-learning-and-improvement s:DevOps, 331"
"Czym są &quot;spring/fall cleanings&quot;, &quot;ticket queue inversion weeks&quot;, &quot;hack days&quot;, &quot;hackathon&quot;, &quot;20% innovation time&quot;?","<p style=""text-align:left;"">- &quot;spring/fall cleanings&quot; (&quot;wiosenne lub jesienne sprzątanie&quot;),<br/>- &quot;ticket queue inversion weeks&quot; (&quot;tygodnie odwróconej kolejki zleceń&quot;),<br/>- &quot;hack days&quot;,<br/>- &quot;hackathon&quot;,<br/>- &quot;20% innovation time&quot;<br/>to wydarzenia wprowadzające innowacje, rzadziej usprawnienia.</p>","devops-handbook-34-21-reserve-time-to-create-organizational-learning-and-improvement s:DevOps, 331"
"Jak organizacja może wspierać uczenie się?","<p style=""text-align:left;"">Organizacja może wspierać nauczanie i uczenie się dzięki:<br/>- poświęcaniu na to czasu organizacji,<br/>- zachęcaniu do udziału w konferencjach, wygłaszania na nich wykładów,<br/>- zachęcaniu do tworzenia i organizowania wewnętrznych lub zewnętrznych konferencji,<br/>- tworzeniu wewnętrznego systemu szkoleń.</p>","devops-handbook-34-21-reserve-time-to-create-organizational-learning-and-improvement s:DevOps, 333"
"Jaką korzyść dla audytorów przynosi automatyzacja akceptacji i zatwierdzania?","<p style=""text-align:left;"">Dzięki automatyzacji akceptacji i zatwierdzania audytor może:<br/>- otrzymywać dowody wygenerowane na żądanie.</p>","devops-handbook-36-part-vi-introduction s:DevOps, 341"
"Jak poprawić bezpieczeństwo?","<p style=""text-align:left;"">Bezpieczeństwo można poprawić poprzez:<br/>- bezpieczeństwo obowiązkiem wszystkich,<br/>- integracja mechanizmów prewencyjnych ze wspólnym repozytorium kodu,<br/>- integracja zabezpieczeń z potokiem wdrożeń,<br/>- integracja zabezpieczeń z mechanizmami telemetrycznymi (wykrywanie luk),<br/>- ochrona potoku wdrożeń,<br/>- integracja wdrażania z zatwierdzaniem,<br/>- zmniejszenie wagi podziału obowiązków.</p>","devops-handbook-36-part-vi-introduction s:DevOps, 341"
"Co to jest &quot;InfoSec&quot;?","<p style=""text-align:left;"">&quot;InfoSec&quot; (Information security) to:<br/>- zagadnienia, praktyki, procesy, narzędzia, działy<br/>- dotyczące lub zajmujące się ochroną informacji.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:https://en.wikipedia.org/wiki/Information_securityhttps://www.cisco.com/c/en/us/products/security/what-is-information-security-infosec.html"
"Kiedy realizować zadania InfoSec?","<p style=""text-align:left;"">Zadania InfoSec najlepiej realizować:<br/>- jak najwcześniej,<br/>- na koniec iteracji (nie na koniec projektu).</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 344"
"Wymień kluczowe miary biznesowe.","<p style=""text-align:left;"">Kluczowe miary biznesowe:<br/>- szybkość tworzenia oprogramowania (szybkość dostarczania funkcjonalności na rynek),<br/>- niepowodzenia interakcji z klientami (awarie i błędy),<br/>- czas reakcji na zgodność z przepisami (czas od żądania audytu do dostarczenia żądanych informacji).</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 345"
"Co to jest &quot;GRC&quot;?","<p style=""text-align:left;"">&quot;GRC&quot; (governance, risk, and compliance - &quot;nadzór, ryzyko i zgodność&quot;) to:<br/>- tradycyjnego sposobu działania InfoSec,<br/>- system do rejestrowania luk,<br/>- dostępny tylko dla InfoSec.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 345"
"Jak DevOps adresuje kwestie InfoSec?","<p style=""text-align:left;"">DevOps wprowadza:<br/>- bezpieczeństwo informacji jako codzienne zadanie każdego DevOps,<br/>- integracja InfoSec w całym technologicznym strumieniu wartości, włączenie w prace DevOps (również jako część zespołu DevOps),<br/>- użycie tych samych systemów (zamiast &quot;GRC&quot; dla InfoSec),<br/>- uwzględnianie InfoSec w śledzeniu defektów,<br/>- udział InfoSec w analizie post-mortem,<br/>- wzajemna nauka.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 343 - 347"
"Jak zintegrować zabezpieczenia z potokiem wdrożeń?","<p style=""text-align:left;"">W celu integracji zabezpieczeń z potokiem wdrożeń:<br/>- wdróż automatyczne testy bezpieczeństwa,<br/>- uruchamianych razem z innymi testami potoku wdrożeń,<br/>- najlepiej przy wprowadzaniu zmian do repozytorium kodu,<br/>- w kontraście do tradycyjnego raportu na koniec prac rozwojowych.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 347"
"Co to jest &quot;ścieżka szczęśliwa&quot;?","<p style=""text-align:left;"">&quot;Ścieżka szczęśliwa&quot; to:<br/>- typ testowania, gdy wszystko idzie zgodnie z oczekiwaniami, bez błędów,<br/>- typowy dla Dev.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 349"
"Co to jest &quot;ścieżka smutna&quot;?","<p style=""text-align:left;"">&quot;Ścieżka smutna&quot; to:<br/>- typ testowania, gdy coś idzie nie tak,<br/>- typowe dla QA, InfoSec i Fraud.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 349"
"Czym zastąpić testy ręcznie?","<p style=""text-align:left;"">Testy ręczne zastąp:<br/>- automatycznymi testami jednostkowymi,<br/>- automatycznymi testami funkcjonalnymi,<br/>aby mogły być stale uruchamiane w potoku wdrożeń.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 349"
"Jakie przedsięwzięcia uwzględnić w ramach testowania?","<p style=""text-align:left;"">W ramach testowania uwzględnij:<br/>- analizę statyczną: sprawdza kod programu,<br/>- analizę dynamiczną: w czasie pracy programu, testowanie z zewnątrz do wewnątrz,<br/>- skanowanie zależności: inny typ testów statycznych,<br/>- integralność kodu źródłowego i podpisywanie kodu: własny kod PGP dla użytkowników repozytorium, podpisywanie operacji.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 349"
"Co to jest &quot;PGP&quot;?","<p style=""text-align:left;"">&quot;PGP&quot; (Pretty Good Privacy) to:<br/>- narzędzie do szyfrowania, odszyfrowywania i uwierzytelniania m.in. poczty elektronicznej, plików, katalogów oraz partycji dyskowych.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:https://pl.wikipedia.org/wiki/Pretty_Good_Privacy"
"Jak pomóc pisać kod, który przeciwdziała nadużyciom?","<p style=""text-align:left;"">W celu przeciwdziałaniu nadużyciom zdefiniuj wzorce projektowe, m.in.:<br/>- jak przechowywać hasła,<br/>- jak postępować w przypadku zapomnianych haseł,<br/>- jak obsługiwać logowanie,<br/>- jak zapobiec wrażliwości na ataki za pomocą skryptów krzyżowych (XSS).</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 350"
"Jak zapewnić bezpieczeństwo łańcuchowi dostaw oprogramowania?","<p style=""text-align:left;"">Ponieważ tworzenie oprogramowania w dużej mierze polega na używaniu zewnętrznych komponentów,<br/>to konieczne jest uwzględnienie luk w tych komponentach.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 353"
"Jak zapewnić bezpieczeństwo środowiska?","<p style=""text-align:left;"">W celu zapewnienia bezpieczeństwa środowiska:<br/>- wdróż testy automatyczne: poprawność ustawień, długość kluczy,<br/>- wdróż testy do skanowania: luki w zabezpieczeniach,<br/>- sprawdzaj, czy otwarte są tylko wymagane porty,<br/>- sprawdzaj pod kątem znanych zagrożeń: np. SQL injection,<br/>- parametry testów pobieraj z repozytorium,<br/>- umieszczaj w repozytorium wyniki testów.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 355"
"Podaj przykłady sytuacji dla telemetrii zabezpieczeń w aplikacji.","<p style=""text-align:left;"">Przykłady sytuacji dla telemetrii zabezpieczeń w aplikacji:<br/>- udane i nieudane logowania,<br/>- resetowanie hasła,<br/>- resetowanie adresu e-mail,<br/>- zmiany danych karty kredytowej.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 358"
"Podaj przykłady sytuacji dla telemetrii zabezpieczeń w środowisku.","<p style=""text-align:left;"">Przykłady sytuacji dla telemetrii zabezpieczeń w środowisku:<br/>- zmiany w systemie operacyjnym (np. produkcja, środowisko kompilacji),<br/>- zmiany w grupach zabezpieczeń,<br/>- modyfikacje konfiguracji,<br/>- zmiany w infrastrukturze chmury,<br/>- próby ataków (XSS, SQL injection),<br/>- błędy serwera WWW (np. 4XX, 5XX).</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 358"
"Jak chronić potok wdrożeń?","<p style=""text-align:left;"">W celu ochrony potoku wdrożeń, czyli:<br/>- kompilacji,<br/>- integracji,<br/>- wdrożeń<br/>należy:<br/>- hartować serwery CI/CD (podobnie jak produkcja, automatyzacja odtworzenia),<br/>- ewidencjonować zmiany przy użyciu systemu kontroli wersji,<br/>- wykrywać sytuacje podejrzane,<br/>- uniezależnić procesy CI,<br/>- system kontroli wersji tylko do odczytu dla CI/CD.</p>","devops-handbook-37-22-information-security-as-everyone-s-job-every-day s:DevOps, 360"
"Co jest podstawowym mechanizmem ograniczania zagrożeń?","<p style=""text-align:left;"">Podstawowym mechanizmem ograniczania zagrożeń dla:<br/>- operacji,<br/>- bezpieczeństwa<br/>są:<br/>- procesy zarządzania zmianami.</p>","devops-handbook-38-23-protecting-the-deployment-pipeline-and-integrating-into-change-management-and-other-security-and-compliance-controls s:DevOps, 363"
"Jak obniżyć ryzyko wdrożeń (w kontekście procesów zarządzania zmianami)?","<p style=""text-align:left;"">W celu obniżenia ryzyka wdrożeń (w kontekście procesów zarządzania zmianami):<br/>- minimalizuj udział ręczny w procesie zatwierdzania zmian (testy automatyczne, proaktywne monitorowanie produkcji),<br/>- zintegruj mechanizmy bezpieczeństwa i zgodności z przepisami z istniejącym procesem zarządzania zmianami.</p>","devops-handbook-38-23-protecting-the-deployment-pipeline-and-integrating-into-change-management-and-other-security-and-compliance-controls s:DevOps, 363"
"Wymień kategorie zmian.","<p style=""text-align:left;"">Kategorie zmian:<br/>- zmiany standardowe: niskie ryzyko, zgodne z ustalonym i zatwierdzonym procesem, uproszczone zatwierdzanie,<br/>- zmiany normalne: wyższe ryzyko, wymagany przegląd lub zatwierdzenie,<br/>- zmiany pilne: wysokie ryzyko, awarie.</p>","devops-handbook-38-23-protecting-the-deployment-pipeline-and-integrating-into-change-management-and-other-security-and-compliance-controls s:DevOps, 364"
"Co to jest &quot;badanie niszczące&quot;?","<p style=""text-align:left;"">&quot;Badanie niszczące&quot; to:<br/>- długotrwałe badanie wytrzymałościowe na produkcji, aż do zniszczenia komponentu,<br/>- pozwala zrozumieć awarię,<br/>- pozwala wprowadzić korekty.</p>","devops-handbook-38-23-protecting-the-deployment-pipeline-and-integrating-into-change-management-and-other-security-and-compliance-controls s:DevOps, 368"
"Kim jest &quot;bibliotekarz kodu&quot;?","<p style=""text-align:left;"">&quot;Bibliotekarz kodu&quot; to:<br/>- osoba która przegląda i zatwierdza zmianę przed wypromowaniem jej do produkcji.</p>","devops-handbook-38-23-protecting-the-deployment-pipeline-and-integrating-into-change-management-and-other-security-and-compliance-controls s:DevOps, 369"
"Jak zmniejszyć ryzyko oszustw lub błędów w procesie rozwoju oprogramowania?","<p style=""text-align:left;"">Żeby zmniejszyć ryzyko oszustw lub błędów w procesie rozwoju oprogramowania:<br/>- zmniejsz rolę podziału obowiązków,<br/>- zrezygnuj z &quot;bibliotekarza kodu&quot;,<br/>- wprowadź programowanie w parach, ciągłą kontrolę operacji ewidencjonowania kodu, przeglądy kodu.</p>","devops-handbook-38-23-protecting-the-deployment-pipeline-and-integrating-into-change-management-and-other-security-and-compliance-controls s:DevOps, 369"
"Na czym polegają trudności we współpracy DevOps i InfoSec?","<p style=""text-align:left;"">Trudności we współpracy DevOps i InfoSec:<br/>- audytor nie potrafi czytać kodu,<br/>- programista nie zna przepisów, norm, ustaw związanych z bezpieczeństwem.</p>","devops-handbook-38-23-protecting-the-deployment-pipeline-and-integrating-into-change-management-and-other-security-and-compliance-controls s:DevOps, 371"
"Jakie jest prawdopodobieństwo porażki transformacji DevOps?","<p style=""text-align:left;"">Prawdopodobieństwo porażki transformacji DevOps jest:<br/>- duże,<br/>- zmiany organizacyjne mogą zostać cofnięte.</p>","devops-handbook-40-a-call-to-action s:DevOps, 378"
"Komu przynosi korzyści DevOps?","<p style=""text-align:left;"">DevOps przynosi korzyści:<br/>- Dev,<br/>- Ops,<br/>- QA,<br/>- InfoSec,<br/>- właścicielom produktu,<br/>- klientom.</p>","devops-handbook-40-a-call-to-action s:DevOps, 379"
"Co to jest &quot;konwergencja DevOps&quot;?","<p style=""text-align:left;"">&quot;Konwergencja DevOps&quot; to:<br/>- zbieżność z innymi ruchami w zarządzaniu,<br/>- wzajemne uzupełnianie i współdziałanie.</p>","devops-handbook-42-appendices s:DevOps, 383"
"Z jakimi ruchami zachodzi &quot;konwergencja DevOps&quot;?","<p style=""text-align:left;"">&quot;Konwergencja DevOps&quot; zachodzi z:<br/>- Lean (szczupłe zarządzanie, unikanie marnotrawstwa),<br/>- Agile (model przyrostowy),<br/>- Toyota Kata (stałe doskonalenie).</p>","devops-handbook-42-appendices s:DevOps, 383"
"Co to jest &quot;chmura konfliktów&quot;?","<p style=""text-align:left;"">&quot;Chmura konfliktów&quot; to:<br/>- konflikt między dwoma potrzebnymi działaniami,<br/>- np. szybko wprowadzaj zmiany vs. zapewniaj stabilność.</p>","devops-handbook-42-appendices s:DevOps, 386"
"Jak przełamać &quot;chmurę konfliktów&quot; dla IT?","<p style=""text-align:left;"">&quot;Chmurę konfliktów&quot; dla IT można przełamać dzięki DevOps:<br/>- integracja Dev i Ops,<br/>- patrz &quot;trzy drogi&quot;.</p>","devops-handbook-42-appendices s:DevOps, 387"
"Na czym polega &quot;spirala degradacji&quot;?","<p style=""text-align:left;"">&quot;Spirala degradacji&quot;:<br/>- kruche aplikacje, projekty pilne, usprawnienia mało pilne,<br/>- coraz bardziej kruche aplikacje,<br/>- coraz więcej czasu na awarie, coraz mniej czasu na projekty,<br/>- aż do braku możliwości realizacji projektów.</p>","devops-handbook-42-appendices s:DevOps, 387"
"Jakie są niebezpieczeństwa związane z przełączaniem pracy i kolejkami?","<p style=""text-align:left;"">Przykład problemu związanego z przełączaniem pracy i kolejkami:<br/>- 30-minutowe zadanie,<br/>- wymaga 7-krotnego przełączania (zespół serwerów, sieci, db...),<br/>- każdy zajęty w 90%,<br/>- więc na każdego czekamy 9h,<br/>- łączny czas oczekiwania 7x9h = 63h</p>","devops-handbook-42-appendices s:DevOps, 389"
"Wymień mity na temat bezpieczeństwa.","<p style=""text-align:left;"">Mity na temat bezpieczeństwa:<br/>1. Najważniejszą przyczyną wypadków i incydentów jest błąd ludzki: Nie, to słabość systemowa.<br/>2. Systemy będą bezpieczne, jeśli ludzie będą przestrzegali obowiązujących procedur.<br/>3. Bezpieczeństwo można poprawić przez bariery i zabezpieczenia; im więcej warstw ochrony tym większe bezpieczeństwo.<br/>4. Analiza wypadku pozwala zidentyfikować jego główną przyczynę (prawdę).<br/>5. Badania wypadków polegają na logicznej i racjonalnej identyfikacji ich przyczyn na podstawie faktów.<br/>6. Bezpieczeństwo zawsze ma najwyższy priorytet. Ta zasada nigdy nie będzie zagrożona.</p>","devops-handbook-42-appendices s:DevOps, 390"
"Dlaczego 5tys. pociągnięć linki Andon nie paraliżuje produkcji Toyoty?","<p style=""text-align:left;"">5tys. pociągnięć linki Andon nie paraliżuje produkcji Toyoty, bo:<br/>- nie każde pociągnięcie powoduje zatrzymanie linii produkcyjnej,<br/>- lider zespołu ma 50s na rozwiązanie problemu.</p>","devops-handbook-42-appendices s:DevOps, 391"
"Jak zamienić operacje instalacji oprogramowania w operacje kontroli wersji?","<p style=""text-align:left;"">Żeby zamienić operacje instalacji oprogramowania w operacje kontroli wersji:<br/>- wyeliminuj instalatory z GUI,<br/>- porównaj czysty obraz serwera z obrazem po instalacji,<br/>- umieść zmiany w repozytorium kodu,<br/>- przekształć ewentualne konfiguracje w bazie danych na pliki.</p>","devops-handbook-42-appendices s:DevOps, 391"
"Co to jest &quot;infinite hows&quot;?","<p style=""text-align:left;"">&quot;Infinite hows&quot; (&quot;nieskończone pytania jak&quot;) to:<br/>- forma dyskusji.</p>","devops-handbook-42-appendices s:DevOps, 393"
"Co to jest &quot;Małpia Armia&quot;?","<p style=""text-align:left;"">&quot;Małpia Armia&quot; (Simian Army) to:<br/>- rozwinięcie &quot;Chaos Monkey&quot; w rodzinę narzędzi,<br/>- symulują coraz bardziej katastrofalne błędy.</p>","devops-handbook-42-appendices s:DevOps, 394"
"Co to jest &quot;przezroczysty czas sprawności&quot;?","<p style=""text-align:left;"">&quot;Przezroczysty czas sprawności&quot; to podejście charakteryzujące się:<br/>- możliwością samodzielnej identyfikacji problemu przez użytkowników,<br/>- komunikacją przez internet (ogólna, zamiast e-mail),<br/>- jednym miejscem komunikacji,<br/>- udostępnienie informacji o problemach,<br/>- panel kondycji usługi.</p>","devops-handbook-42-appendices s:DevOps, 395"
